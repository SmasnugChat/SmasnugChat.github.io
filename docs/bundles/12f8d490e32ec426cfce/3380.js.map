{"version":3,"file":"bundles/12f8d490e32ec426cfce/3380.js","mappings":"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","sources":["webpack://element-web/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/index-wasm-esm.mjs","webpack://element-web/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/matrix_sdk_crypto_wasm_bg.js"],"sourcesContent":["// Copyright 2024 The Matrix.org Foundation C.I.C.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * This is the entry point for ESM environments which support the ES Module Integration Proposal for WebAssembly [1].\n *\n * [1]: https://github.com/webassembly/esm-integration\n */\n\nimport * as bindings from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n\n// Although we could simply instantiate the WASM at import time with a top-level `await`,\n// we avoid that, to make it easier for callers to delay loading the WASM (and instead\n// wait until `initAsync` is called). (Also, Safari 14 doesn't support top-level `await`.)\n//\n// However, having done so, there is no way to synchronously load the WASM if the user ends\n// up using the bindings before calling `initAsync` (unlike under Node.js), so we just throw\n// an error.\nbindings.__wbg_set_wasm(\n    new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(\n                    \"@matrix-org/matrix-sdk-crypto-wasm was used before it was initialized. Call `initAsync` first.\",\n                );\n            },\n        },\n    ),\n);\n\n/**\n * Stores a promise of the `loadModuleAsync` call\n * @type {Promise<void> | null}\n */\nlet modPromise = null;\n\n/**\n * Loads and instantiates the WASM module asynchronously\n *\n * @returns {Promise<void>}\n */\nasync function loadModuleAsync() {\n    /** @type {typeof import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm.d.ts\")} */\n    // @ts-expect-error TSC can't find the definitions file, for some reason.\n    const wasm = await import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm\");\n    bindings.__wbg_set_wasm(wasm);\n    wasm.__wbindgen_start();\n}\n\n/**\n * Load the WebAssembly module in the background, if it has not already been loaded.\n *\n * Returns a promise which will resolve once the other methods are ready.\n *\n * @returns {Promise<void>}\n */\nexport async function initAsync() {\n    if (!modPromise) modPromise = loadModuleAsync();\n    await modPromise;\n}\n\n// Re-export everything from the generated javascript wrappers\nexport * from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_4.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n                CLOSURE_DTORS.unregister(state);\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_4.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    const mem = getDataViewMemory0();\n    for (let i = 0; i < array.length; i++) {\n        mem.setUint32(ptr + 4 * i, addToExternrefTable0(array[i]), true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n\nlet cachedUint16ArrayMemory0 = null;\n\nfunction getUint16ArrayMemory0() {\n    if (cachedUint16ArrayMemory0 === null || cachedUint16ArrayMemory0.byteLength === 0) {\n        cachedUint16ArrayMemory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16ArrayMemory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint16ArrayMemory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n * Get the versions of the Rust libraries we are using.\n * @returns {Versions}\n */\nexport function getVersions() {\n    const ret = wasm.getVersions();\n    return Versions.__wrap(ret);\n}\n\n/**\n * Run some stuff when the Wasm module is instantiated.\n *\n * Right now, it does the following:\n *\n * * Redirect Rust panics to JavaScript console.\n */\nexport function start() {\n    wasm.start();\n}\n\nfunction __wbg_adapter_58(arg0, arg1, arg2) {\n    const ret = wasm.closure29_externref_shim_multivalue_shim(arg0, arg1, arg2);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\nfunction __wbg_adapter_61(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__heca5c4426cc7e703(arg0, arg1);\n}\n\nfunction __wbg_adapter_64(arg0, arg1, arg2) {\n    wasm.closure735_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_67(arg0, arg1, arg2) {\n    wasm.closure415_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_70(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h41d552962a79dfb4(arg0, arg1);\n}\n\nfunction __wbg_adapter_758(arg0, arg1, arg2, arg3) {\n    wasm.closure431_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * Decryption error codes\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const DecryptionErrorCode = Object.freeze({\n    /**\n     * The room key is not known\n     */\n    MissingRoomKey: 0, \"0\": \"MissingRoomKey\",\n    /**\n     * The room key is known but ratcheted\n     */\n    UnknownMessageIndex: 1, \"1\": \"UnknownMessageIndex\",\n    /**\n     * Decryption failed because of a mismatch between the identity keys of the\n     * device we received the room key from and the identity keys recorded in\n     * the plaintext of the room key to-device message.\n     */\n    MismatchedIdentityKeys: 2, \"2\": \"MismatchedIdentityKeys\",\n    /**\n     * We weren't able to link the message back to any known device.\n     */\n    UnknownSenderDevice: 3, \"3\": \"UnknownSenderDevice\",\n    /**\n     * The sender device is not cross-signed.\n     */\n    UnsignedSenderDevice: 4, \"4\": \"UnsignedSenderDevice\",\n    /**\n     * The sender's identity is unverified, but was previously verified.\n     */\n    SenderIdentityVerificationViolation: 5, \"5\": \"SenderIdentityVerificationViolation\",\n    /**\n     * Other failure.\n     */\n    UnableToDecrypt: 6, \"6\": \"UnableToDecrypt\",\n});\n/**\n * The basic key algorithm names in the specification.\n * @enum {0 | 1 | 3}\n */\nexport const DeviceKeyAlgorithmName = Object.freeze({\n    /**\n     * The Ed25519 signature algorithm.\n     */\n    Ed25519: 0, \"0\": \"Ed25519\",\n    /**\n     * The Curve25519 ECDH algorithm.\n     */\n    Curve25519: 1, \"1\": \"Curve25519\",\n    /**\n     * An unknown device key algorithm.\n     */\n    Unknown: 3, \"3\": \"Unknown\",\n});\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n * @enum {0 | 1 | 2}\n */\nexport const DeviceKeyName = Object.freeze({\n    /**\n     * The curve25519 device key.\n     */\n    Curve25519: 0, \"0\": \"Curve25519\",\n    /**\n     * The ed25519 device key.\n     */\n    Ed25519: 1, \"1\": \"Ed25519\",\n    /**\n     * An unknown device key.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * An encryption algorithm to be used to encrypt messages sent to a\n * room.\n * @enum {0 | 1 | 2}\n */\nexport const EncryptionAlgorithm = Object.freeze({\n    /**\n     * Olm version 1 using Curve25519, AES-256, and SHA-256.\n     */\n    OlmV1Curve25519AesSha2: 0, \"0\": \"OlmV1Curve25519AesSha2\",\n    /**\n     * Megolm version 1 using AES-256 and SHA-256.\n     */\n    MegolmV1AesSha2: 1, \"1\": \"MegolmV1AesSha2\",\n    /**\n     * Unsupported algorithm.\n     *\n     * Applications should ignore this value if it is received, and should\n     * never set it.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * Who can see a room's history.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const HistoryVisibility = Object.freeze({\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they were invited onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *invite* or *join*.\n     */\n    Invited: 0, \"0\": \"Invited\",\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they joined the room onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *join*.\n     */\n    Joined: 1, \"1\": \"Joined\",\n    /**\n     * Previous events are always accessible to newly joined members.\n     *\n     * All events in the room are accessible, even those sent when\n     * the member was not a part of the room.\n     */\n    Shared: 2, \"2\": \"Shared\",\n    /**\n     * All events while this is the `HistoryVisibility` value may be\n     * shared by any participating homeserver with anyone, regardless\n     * of whether they have ever joined the room.\n     */\n    WorldReadable: 3, \"3\": \"WorldReadable\",\n});\n/**\n * The local trust state of a device.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const LocalTrust = Object.freeze({\n    /**\n     * The device has been verified and is trusted.\n     */\n    Verified: 0, \"0\": \"Verified\",\n    /**\n     * The device been blacklisted from communicating.\n     */\n    BlackListed: 1, \"1\": \"BlackListed\",\n    /**\n     * The trust state of the device is being ignored.\n     */\n    Ignored: 2, \"2\": \"Ignored\",\n    /**\n     * The trust state is unset.\n     */\n    Unset: 3, \"3\": \"Unset\",\n});\n/**\n * Logger level.\n * @enum {0 | 1 | 2 | 3 | 4}\n */\nexport const LoggerLevel = Object.freeze({\n    /**\n     * `TRACE` level.\n     *\n     * Designate very low priority, often extremely verbose,\n     * information.\n     */\n    Trace: 0, \"0\": \"Trace\",\n    /**\n     * `DEBUG` level.\n     *\n     * Designate lower priority information.\n     */\n    Debug: 1, \"1\": \"Debug\",\n    /**\n     * `INFO` level.\n     *\n     * Designate useful information.\n     */\n    Info: 2, \"2\": \"Info\",\n    /**\n     * `WARN` level.\n     *\n     * Designate hazardous situations.\n     */\n    Warn: 3, \"3\": \"Warn\",\n    /**\n     * `ERROR` level.\n     *\n     * Designate very serious errors.\n     */\n    Error: 4, \"4\": \"Error\",\n});\n/**\n * The mode of the QR code login.\n *\n * The QR code login mechanism supports both, the new device, as well as the\n * existing device to display the QR code.\n *\n * The different modes have an explicit one-byte identifier which gets added to\n * the QR code data.\n * @enum {0 | 1}\n */\nexport const QrCodeMode = Object.freeze({\n    /**\n     * The new device is displaying the QR code.\n     */\n    Login: 0, \"0\": \"Login\",\n    /**\n     * The existing device is displaying the QR code.\n     */\n    Reciprocate: 1, \"1\": \"Reciprocate\",\n});\n/**\n * List of `Qr` states\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const QrState = Object.freeze({\n    /**\n     * We have received the other device's details (from the\n     * `m.key.verification.request` or `m.key.verification.ready`) and\n     * established the shared secret, so can\n     * display the QR code.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The other side has scanned our QR code and sent an\n     * `m.key.verification.start` message with `method: m.reciprocate.v1` with\n     * matching shared secret.\n     */\n    Scanned: 1, \"1\": \"Scanned\",\n    /**\n     * Our user has confirmed that the other device scanned successfully. We\n     * have sent an `m.key.verification.done`.\n     */\n    Confirmed: 2, \"2\": \"Confirmed\",\n    /**\n     * We have scanned the other side's QR code and are able to send a\n     * `m.key.verification.start` message with `method: m.reciprocate.v1`.\n     *\n     * Call `Qr::reciprocate` to build the start message.\n     *\n     * Note that, despite the name of this state, we have not necessarily\n     * yet sent the `m.reciprocate.v1` message.\n     */\n    Reciprocated: 3, \"3\": \"Reciprocated\",\n    /**\n     * Verification complete: we have received an `m.key.verification.done`\n     * from the other side.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * Verification cancelled or failed.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n/**\n * Represent the type of a request.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const RequestType = Object.freeze({\n    /**\n     * Represents a `KeysUploadRequest`.\n     */\n    KeysUpload: 0, \"0\": \"KeysUpload\",\n    /**\n     * Represents a `KeysQueryRequest`.\n     */\n    KeysQuery: 1, \"1\": \"KeysQuery\",\n    /**\n     * Represents a `KeysClaimRequest`.\n     */\n    KeysClaim: 2, \"2\": \"KeysClaim\",\n    /**\n     * Represents a `ToDeviceRequest`.\n     */\n    ToDevice: 3, \"3\": \"ToDevice\",\n    /**\n     * Represents a `SignatureUploadRequest`.\n     */\n    SignatureUpload: 4, \"4\": \"SignatureUpload\",\n    /**\n     * Represents a `RoomMessageRequest`.\n     */\n    RoomMessage: 5, \"5\": \"RoomMessage\",\n    /**\n     * Represents a `KeysBackupRequest`.\n     */\n    KeysBackup: 6, \"6\": \"KeysBackup\",\n});\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n * @enum {0 | 1 | 2}\n */\nexport const ShieldColor = Object.freeze({\n    /**\n     * Important warning\n     */\n    Red: 0, \"0\": \"Red\",\n    /**\n     * Low warning\n     */\n    Grey: 1, \"1\": \"Grey\",\n    /**\n     * No warning\n     */\n    None: 2, \"2\": \"None\",\n});\n/**\n * A machine-readable representation of the authenticity for a `ShieldState`.\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const ShieldStateCode = Object.freeze({\n    /**\n     * Not enough information available to check the authenticity.\n     */\n    AuthenticityNotGuaranteed: 0, \"0\": \"AuthenticityNotGuaranteed\",\n    /**\n     * The sending device isn't yet known by the Client.\n     */\n    UnknownDevice: 1, \"1\": \"UnknownDevice\",\n    /**\n     * The sending device hasn't been verified by the sender.\n     */\n    UnsignedDevice: 2, \"2\": \"UnsignedDevice\",\n    /**\n     * The sender hasn't been verified by the Client's user.\n     */\n    UnverifiedIdentity: 3, \"3\": \"UnverifiedIdentity\",\n    /**\n     * An unencrypted event in an encrypted room.\n     */\n    SentInClear: 4, \"4\": \"SentInClear\",\n    /**\n     * The sender was previously verified but changed their identity.\n     */\n    VerificationViolation: 5, \"5\": \"VerificationViolation\",\n});\n/**\n * The result of a signature check.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const SignatureState = Object.freeze({\n    /**\n     * The signature is missing.\n     */\n    Missing: 0, \"0\": \"Missing\",\n    /**\n     * The signature is invalid.\n     */\n    Invalid: 1, \"1\": \"Invalid\",\n    /**\n     * The signature is valid but the device or user identity that created the\n     * signature is not trusted.\n     */\n    ValidButNotTrusted: 2, \"2\": \"ValidButNotTrusted\",\n    /**\n     * The signature is valid and the device or user identity that created the\n     * signature is trusted.\n     */\n    ValidAndTrusted: 3, \"3\": \"ValidAndTrusted\",\n});\n/**\n * The trust level required to decrypt an event\n * @enum {0 | 1 | 2}\n */\nexport const TrustRequirement = Object.freeze({\n    /**\n     * Decrypt events from everyone regardless of trust\n     */\n    Untrusted: 0, \"0\": \"Untrusted\",\n    /**\n     * Only decrypt events from cross-signed or legacy devices\n     */\n    CrossSignedOrLegacy: 1, \"1\": \"CrossSignedOrLegacy\",\n    /**\n     * Only decrypt events from cross-signed devices\n     */\n    CrossSigned: 2, \"2\": \"CrossSigned\",\n});\n/**\n * List of available verification methods.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const VerificationMethod = Object.freeze({\n    /**\n     * The `m.sas.v1` verification method.\n     *\n     * SAS means Short Authentication String.\n     */\n    SasV1: 0, \"0\": \"SasV1\",\n    /**\n     * The `m.qr_code.scan.v1` verification method.\n     */\n    QrCodeScanV1: 1, \"1\": \"QrCodeScanV1\",\n    /**\n     * The `m.qr_code.show.v1` verification method.\n     */\n    QrCodeShowV1: 2, \"2\": \"QrCodeShowV1\",\n    /**\n     * The `m.reciprocate.v1` verification method.\n     */\n    ReciprocateV1: 3, \"3\": \"ReciprocateV1\",\n});\n/**\n * List of VerificationRequestState phases\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const VerificationRequestPhase = Object.freeze({\n    /**\n     * The verification request has been newly created by us.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The verification request was received from the other party.\n     */\n    Requested: 1, \"1\": \"Requested\",\n    /**\n     * The verification request is ready to start a verification flow.\n     */\n    Ready: 2, \"2\": \"Ready\",\n    /**\n     * The verification request has transitioned into a concrete verification\n     * flow. For example it transitioned into the emoji based SAS\n     * verification.\n     */\n    Transitioned: 3, \"3\": \"Transitioned\",\n    /**\n     * The verification flow that was started with this request has finished.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * The verification process has been cancelled.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n\nconst __wbindgen_enum_IdbRequestReadyState = [\"pending\", \"done\"];\n\nconst __wbindgen_enum_IdbTransactionMode = [\"readonly\", \"readwrite\", \"versionchange\", \"readwriteflush\", \"cleanup\"];\n\nconst AttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_attachment_free(ptr >>> 0, 1));\n/**\n * A type to encrypt and to decrypt anything that can fit in an\n * `Uint8Array`, usually big buffer.\n */\nexport class Attachment {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_attachment_free(ptr, 0);\n    }\n    /**\n     * Encrypt the content of the `Uint8Array`.\n     *\n     * It produces an `EncryptedAttachment`, which can be used to\n     * retrieve the media encryption information, or the encrypted\n     * data.\n     * @param {Uint8Array} array\n     * @returns {EncryptedAttachment}\n     */\n    static encrypt(array) {\n        const ptr0 = passArray8ToWasm0(array, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.attachment_encrypt(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return EncryptedAttachment.__wrap(ret[0]);\n    }\n    /**\n     * Decrypt an `EncryptedAttachment`.\n     *\n     * The encrypted attachment can be created manually, or from the\n     * `encrypt` method.\n     *\n     * **Warning**: The encrypted attachment can be used only\n     * **once**! The encrypted data will still be present, but the\n     * media encryption info (which contain secrets) will be\n     * destroyed. It is still possible to get a JSON-encoded backup\n     * by calling `EncryptedAttachment.mediaEncryptionInfo`.\n     * @param {EncryptedAttachment} attachment\n     * @returns {Uint8Array}\n     */\n    static decrypt(attachment) {\n        _assertClass(attachment, EncryptedAttachment);\n        const ret = wasm.attachment_decrypt(attachment.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst BackupDecryptionKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupdecryptionkey_free(ptr >>> 0, 1));\n/**\n * The private part of the backup key, the one used for recovery.\n */\nexport class BackupDecryptionKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupDecryptionKey.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupDecryptionKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupDecryptionKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupdecryptionkey_free(ptr, 0);\n    }\n    /**\n     * Create a new random [`BackupDecryptionKey`].\n     * @returns {BackupDecryptionKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.backupdecryptionkey_createRandomKey();\n        return BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * Try to create a [`BackupDecryptionKey`] from a base 64 encoded string.\n     * @param {string} key\n     * @returns {BackupDecryptionKey}\n     */\n    static fromBase64(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.backupdecryptionkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return BackupDecryptionKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the backup decryption key to a base 64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.backupdecryptionkey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public part of the backup key.\n     * @returns {MegolmV1BackupKey}\n     */\n    get megolmV1PublicKey() {\n        const ret = wasm.backupdecryptionkey_megolmV1PublicKey(this.__wbg_ptr);\n        return MegolmV1BackupKey.__wrap(ret);\n    }\n    /**\n     * Try to decrypt a message that was encrypted using the public part of the\n     * backup key.\n     * @param {string} ephemeral_key\n     * @param {string} mac\n     * @param {string} ciphertext\n     * @returns {string}\n     */\n    decryptV1(ephemeral_key, mac, ciphertext) {\n        let deferred5_0;\n        let deferred5_1;\n        try {\n            const ptr0 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            const ret = wasm.backupdecryptionkey_decryptV1(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var ptr4 = ret[0];\n            var len4 = ret[1];\n            if (ret[3]) {\n                ptr4 = 0; len4 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred5_0 = ptr4;\n            deferred5_1 = len4;\n            return getStringFromWasm0(ptr4, len4);\n        } finally {\n            wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n        }\n    }\n}\n\nconst BackupKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupkeys_free(ptr >>> 0, 1));\n/**\n * Stored versions of the backup keys.\n */\nexport class BackupKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupkeys_free(ptr, 0);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @returns {BackupDecryptionKey | undefined}\n     */\n    get decryptionKey() {\n        const ret = wasm.__wbg_get_backupkeys_decryptionKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @param {BackupDecryptionKey | undefined} [arg0]\n     */\n    set decryptionKey(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, BackupDecryptionKey);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_backupkeys_decryptionKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The version that we are using for backups.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_backupkeys_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The version that we are using for backups.\n     * @param {string | undefined} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupkeys_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The key used to decrypt backed up room keys, encoded as base64\n     *\n     * @deprecated Use `BackupKeys.decryptionKey.toBase64()`\n     * @returns {string | undefined}\n     */\n    get decryptionKeyBase64() {\n        const ret = wasm.backupkeys_decryptionKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst BackupSecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupsecretsbundle_free(ptr >>> 0, 1));\n/**\n * The backup-specific parts of a secrets bundle.\n */\nexport class BackupSecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupSecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupSecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupSecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupsecretsbundle_free(ptr, 0);\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @returns {string}\n     */\n    get key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @param {string} arg0\n     */\n    set key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @returns {string}\n     */\n    get backup_version() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_backup_version(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @param {string} arg0\n     */\n    set backup_version(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst BaseMigrationDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_basemigrationdata_free(ptr >>> 0, 1));\n/**\n * The base dataset that is important to migrate to the Rust SDK.\n *\n * Can be imported into the rust store with {@link #migrateBaseData}.\n */\nexport class BaseMigrationData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BaseMigrationDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_basemigrationdata_free(ptr, 0);\n    }\n    /**\n     * The user id of the account owner.\n     * @returns {UserId | undefined}\n     */\n    get userId() {\n        const ret = wasm.__wbg_get_basemigrationdata_userId(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The user id of the account owner.\n     * @param {UserId | undefined} [arg0]\n     */\n    set userId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, UserId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_userId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the account owner.\n     * @returns {DeviceId | undefined}\n     */\n    get deviceId() {\n        const ret = wasm.__wbg_get_basemigrationdata_deviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the account owner.\n     * @param {DeviceId | undefined} [arg0]\n     */\n    set deviceId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_deviceId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @returns {string}\n     */\n    get pickledAccount() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_basemigrationdata_pickledAccount(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @param {string} arg0\n     */\n    set pickledAccount(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version that is currently active.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup version that is currently active.\n     * @param {string | undefined} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @returns {string | undefined}\n     */\n    get backupRecoveryKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupRecoveryKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @param {string | undefined} [arg0]\n     */\n    set backupRecoveryKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningMasterKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @param {string | undefined} [arg0]\n     */\n    set privateCrossSigningMasterKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningSelfSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @param {string | undefined} [arg0]\n     */\n    set privateCrossSigningSelfSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningUserSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @param {string | undefined} [arg0]\n     */\n    set privateCrossSigningUserSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Create a new `BaseMigrationData` with default values.\n     */\n    constructor() {\n        const ret = wasm.basemigrationdata_new();\n        this.__wbg_ptr = ret >>> 0;\n        BaseMigrationDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst CancelInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cancelinfo_free(ptr >>> 0, 1));\n/**\n * Information about the cancellation of a verification request or\n * verification flow.\n */\nexport class CancelInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CancelInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CancelInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CancelInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cancelinfo_free(ptr, 0);\n    }\n    /**\n     * Get the human readable reason of the cancellation.\n     * @returns {string}\n     */\n    reason() {\n        const ret = wasm.cancelinfo_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the `code` (e.g. `m.user`) that was used to cancel the\n     * verification.\n     * @returns {string}\n     */\n    cancelCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.cancelinfo_cancelCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Was the verification cancelled by us?\n     * @returns {boolean}\n     */\n    cancelledbyUs() {\n        const ret = wasm.cancelinfo_cancelledbyUs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CheckCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcode_free(ptr >>> 0, 1));\n/**\n * A check code that can be used to confirm that two [`EstablishedEcies`]\n * objects share the same secret. This is supposed to be shared out-of-band to\n * protect against active Man-in-the-middle (MITM) attacks.\n *\n * Since the initiator device can always tell whether a MITM attack is in\n * progress after channel establishment, this code technically carries only a\n * single bit of information, representing whether the initiator has determined\n * that the channel is \"secure\" or \"not secure\".\n *\n * However, given this will need to be interactively confirmed by the user,\n * there is risk that the user would confirm the dialogue without paying\n * attention to its content. By expanding this single bit into a deterministic\n * two-digit check code, the user is forced to pay more attention by having to\n * enter it instead of just clicking through a dialogue.\n */\nexport class CheckCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CheckCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CheckCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcode_free(ptr, 0);\n    }\n    /**\n     * Convert the check code to an array of two bytes.\n     *\n     * The bytes can be converted to a more user-friendly representation. The\n     * [`CheckCode::to_digit`] converts the bytes to a two-digit number.\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        const ret = wasm.checkcode_as_bytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Convert the check code to two base-10 numbers.\n     *\n     * The number should be displayed with a leading 0 in case the first digit\n     * is a 0.\n     * @returns {number}\n     */\n    to_digit() {\n        const ret = wasm.checkcode_to_digit(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst CollectStrategyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_collectstrategy_free(ptr >>> 0, 1));\n/**\n * Strategy to collect the devices that should receive room keys for the\n * current discussion.\n */\nexport class CollectStrategy {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CollectStrategy.prototype);\n        obj.__wbg_ptr = ptr;\n        CollectStrategyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CollectStrategyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_collectstrategy_free(ptr, 0);\n    }\n    /**\n     * Tests for equality between two [`CollectStrategy`]s.\n     * @param {CollectStrategy} other\n     * @returns {boolean}\n     */\n    eq(other) {\n        _assertClass(other, CollectStrategy);\n        const ret = wasm.collectstrategy_eq(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Device based sharing strategy.\n     *\n     * If `only_allow_trusted_devices` is `true`, devices that are not trusted\n     * will be excluded from the conversation. A device is trusted if any of\n     * the following is true:\n     *     - It was manually marked as trusted.\n     *     - It was marked as verified via interactive verification.\n     *     - It is signed by its owner identity, and this identity has been\n     *       trusted via interactive verification.\n     *     - It is the current own device of the user.\n     *\n     * If `error_on_verified_user` is `true`, and a verified user has an\n     * unsigned device, key sharing will fail with an error.\n     *\n     * If `error_on_verified_user` is `true`, and a verified user has replaced\n     * their identity, key sharing will fail with an error.\n     *\n     * Otherwise, keys are shared with unsigned devices as normal.\n     *\n     * Once the problematic devices are blacklisted or whitelisted the\n     * caller can retry to share a second time.\n     * @param {boolean} only_allow_trusted_devices\n     * @param {boolean} error_on_verified_user_problem\n     * @returns {CollectStrategy}\n     */\n    static deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem) {\n        const ret = wasm.collectstrategy_deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share based on identity. Only distribute to devices signed by their\n     * owner. If a user has no published identity he will not receive\n     * any room keys.\n     * @returns {CollectStrategy}\n     */\n    static identityBasedStrategy() {\n        const ret = wasm.collectstrategy_identityBasedStrategy();\n        return CollectStrategy.__wrap(ret);\n    }\n}\n\nconst CrossSigningBootstrapRequestsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningbootstraprequests_free(ptr >>> 0, 1));\n/**\n * A set of requests to be executed when bootstrapping cross-signing using\n * {@link OlmMachine.bootstrapCrossSigning}.\n */\nexport class CrossSigningBootstrapRequests {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningBootstrapRequests.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningBootstrapRequestsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningBootstrapRequestsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningbootstraprequests_free(ptr, 0);\n    }\n    /**\n     * An optional request to upload a device key.\n     *\n     * This will either be `undefined`, or an \"outgoing request\" as returned by\n     * {@link OlmMachine.outgoingRequests}.\n     *\n     * If it is defined, the request should be sent first, and the result sent\n     * back with {@link OlmMachine.markRequestAsSent}.\n     * @returns {any}\n     */\n    get uploadKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Request to upload the cross-signing keys.\n     *\n     * Should be sent second.\n     * @returns {UploadSigningKeysRequest}\n     */\n    get uploadSigningKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(this.__wbg_ptr);\n        return UploadSigningKeysRequest.__wrap(ret);\n    }\n    /**\n     * Request to upload key signatures, including those for the cross-signing\n     * keys, and maybe some for the optional uploaded key too.\n     *\n     * Should be sent last.\n     * @returns {SignatureUploadRequest}\n     */\n    get uploadSignaturesRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(this.__wbg_ptr);\n        return SignatureUploadRequest.__wrap(ret);\n    }\n}\n\nconst CrossSigningKeyExportFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningkeyexport_free(ptr >>> 0, 1));\n/**\n * A struct containing private cross signing keys that can be backed\n * up or uploaded to the secret store.\n */\nexport class CrossSigningKeyExport {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningKeyExport.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningKeyExportFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningKeyExportFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningkeyexport_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get masterKey() {\n        const ret = wasm.crosssigningkeyexport_masterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get self_signing_key() {\n        const ret = wasm.crosssigningkeyexport_self_signing_key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get userSigningKey() {\n        const ret = wasm.crosssigningkeyexport_userSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst CrossSigningStatusFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningstatus_free(ptr >>> 0, 1));\n/**\n * Struct representing the state of our private cross signing keys,\n * it shows which private cross signing keys we have locally stored.\n */\nexport class CrossSigningStatus {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningStatus.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningStatusFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningStatusFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningstatus_free(ptr, 0);\n    }\n    /**\n     * Do we have the master key?\n     * @returns {boolean}\n     */\n    get hasMaster() {\n        const ret = wasm.crosssigningstatus_hasMaster(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the self signing key? This one is necessary to sign\n     * our own devices.\n     * @returns {boolean}\n     */\n    get hasSelfSigning() {\n        const ret = wasm.crosssigningstatus_hasSelfSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the user signing key? This one is necessary to sign\n     * other users.\n     * @returns {boolean}\n     */\n    get hasUserSigning() {\n        const ret = wasm.crosssigningstatus_hasUserSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst Curve25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519publickey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 public key.\n */\nexport class Curve25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519publickey_free(ptr, 0);\n    }\n    /**\n     * Create a new [`Curve25519PublicKey`] from a base64 encoded string.\n     * @param {string} key\n     */\n    constructor(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519publickey_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Curve25519PublicKeyFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The number of bytes a Curve25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.curve25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Curve25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DecryptedRoomEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedroomevent_free(ptr >>> 0, 1));\n/**\n * A decrypted room event.\n */\nexport class DecryptedRoomEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedRoomEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedRoomEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedRoomEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedroomevent_free(ptr, 0);\n    }\n    /**\n     * The JSON-encoded decrypted event.\n     * @returns {string}\n     */\n    get event() {\n        const ret = wasm.__wbg_get_decryptedroomevent_event(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The user ID of the event sender, note this is untrusted data\n     * unless the `verification_state` is as well trusted.\n     * @returns {UserId | undefined}\n     */\n    get sender() {\n        const ret = wasm.decryptedroomevent_sender(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event, note this\n     * is untrusted data unless `verification_state` is as well\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.decryptedroomevent_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.decryptedroomevent_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that have created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.decryptedroomevent_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Returns an empty array\n     *\n     * Previously, this returned the chain of Curve25519 keys through which\n     * this session was forwarded, via `m.forwarded_room_key` events.\n     * However, that is not cryptographically reliable, and clients should not\n     * be using it.\n     *\n     * @see https://github.com/matrix-org/matrix-spec/issues/1089\n     * @returns {Array<any>}\n     */\n    get forwardingCurve25519KeyChain() {\n        const ret = wasm.decryptedroomevent_forwardingCurve25519KeyChain(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     * @param {boolean} strict\n     * @returns {ShieldState | undefined}\n     */\n    shieldState(strict) {\n        const ret = wasm.decryptedroomevent_shieldState(this.__wbg_ptr, strict);\n        return ret === 0 ? undefined : ShieldState.__wrap(ret);\n    }\n}\n\nconst DecryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for decrypting messages\n */\nexport class DecryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @returns {TrustRequirement}\n     */\n    get sender_device_trust_requirement() {\n        const ret = wasm.__wbg_get_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @param {TrustRequirement} arg0\n     */\n    set sender_device_trust_requirement(arg0) {\n        wasm.__wbg_set_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Create a new `DecryptionSettings` with the given trust requirement.\n     * @param {TrustRequirement} sender_device_trust_requirement\n     */\n    constructor(sender_device_trust_requirement) {\n        const ret = wasm.decryptionsettings_new(sender_device_trust_requirement);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A dehydrated device that can be uploaded to the server\n */\nexport class DehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Create the request to upload the dehydrated device\n     * @param {string} initial_device_display_name\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<PutDehydratedDeviceRequest>}\n     */\n    keysForUpload(initial_device_display_name, dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevice_keysForUpload(this.__wbg_ptr, initial_device_display_name, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevicekey_free(ptr >>> 0, 1));\n/**\n * Dehydrated device key\n */\nexport class DehydratedDeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevicekey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random dehydrated device key.\n     * @returns {DehydratedDeviceKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.dehydrateddevicekey_createRandomKey();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Generates a dehydrated device key from a given array.\n     * @param {Uint8Array} array\n     * @returns {DehydratedDeviceKey}\n     */\n    static createKeyFromArray(array) {\n        const ret = wasm.dehydrateddevicekey_createKeyFromArray(array);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the dehydrated device key to a base64-encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.dehydrateddevicekey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevices_free(ptr >>> 0, 1));\n/**\n * Struct collecting methods to create and rehydrate dehydrated devices.\n */\nexport class DehydratedDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevices_free(ptr, 0);\n    }\n    /**\n     * Create a new {@link DehydratedDevice} which can be uploaded to the\n     * server.\n     * @returns {Promise<DehydratedDevice>}\n     */\n    create() {\n        const ret = wasm.dehydrateddevices_create(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Rehydrate a dehydrated device.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @param {DeviceId} device_id\n     * @param {string} device_data\n     * @returns {Promise<RehydratedDevice>}\n     */\n    rehydrate(dehydrated_device_key, device_id, device_data) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        _assertClass(device_id, DeviceId);\n        const ptr0 = passStringToWasm0(device_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.dehydrateddevices_rehydrate(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the cached dehydrated device key if any.\n     *\n     * `None` if the key was not previously cached (via\n     * {@link DehydratedDevices.saveDehydratedDeviceKey}).\n     * @returns {Promise<DehydratedDeviceKey | undefined>}\n     */\n    getDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_getDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store the dehydrated device key in the crypto store.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<void>}\n     */\n    saveDehydratedDeviceKey(dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevices_saveDehydratedDeviceKey(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Clear the dehydrated device key saved in the crypto store.\n     * @returns {Promise<void>}\n     */\n    deleteDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_deleteDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_device_free(ptr >>> 0, 1));\n/**\n * A device represents a E2EE capable client of an user.\n */\nexport class Device {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Device.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_device_free(ptr, 0);\n    }\n    /**\n     * Request an interactive verification with this device.\n     *\n     * Returns a 2-element array `[VerificationRequest, ToDeviceRequest]`.\n     * @param {any[] | undefined} [methods]\n     * @returns {Array<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a to-device message to be sent to this device, using Olm\n     * encryption.\n     *\n     * Prior to calling this method you must ensure that an Olm session is\n     * available for the target device. This can be done by calling\n     * {@link OlmMachine.getMissingSessions}.\n     *\n     * The caller is responsible for sending the encrypted\n     * event to the target device. If multiple messages are\n     * encrypted for the same device using this method they should be sent in\n     * the same order as they are encrypted.\n     *\n     * # Returns\n     *\n     * Returns a promise for a JSON string containing the `content` of an\n     * encrypted event, which be used to create the payload for a\n     * `/sendToDevice` API.\n     * @param {string} event_type\n     * @param {any} content\n     * @returns {Promise<string>}\n     */\n    encryptToDeviceEvent(event_type, content) {\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_encryptToDeviceEvent(this.__wbg_ptr, ptr0, len0, content);\n        return ret;\n    }\n    /**\n     * Is this device considered to be verified.\n     *\n     * This method returns true if either the `is_locally_trusted`\n     * method returns `true` or if the `is_cross_signing_trusted`\n     * method returns `true`.\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.device_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device considered to be verified using cross signing.\n     * @returns {boolean}\n     */\n    isCrossSigningTrusted() {\n        const ret = wasm.device_isCrossSigningTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device cross-signed by its owner?\n     * @returns {boolean}\n     */\n    isCrossSignedByOwner() {\n        const ret = wasm.device_isCrossSignedByOwner(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Set the local trust state of the device to the given state.\n     *\n     * This won’t affect any cross signing trust state, this only\n     * sets a flag marking to have the given trust state.\n     *\n     * `trust_state` represents the new trust state that should be\n     * set for the device.\n     * @param {LocalTrust} local_state\n     * @returns {Promise<any>}\n     */\n    setLocalTrust(local_state) {\n        const ret = wasm.device_setLocalTrust(this.__wbg_ptr, local_state);\n        return ret;\n    }\n    /**\n     * The user ID of the device owner.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.device_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique ID of the device.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.device_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the human readable name of the device.\n     * @returns {string | undefined}\n     */\n    get displayName() {\n        const ret = wasm.device_displayName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the key of the given key algorithm belonging to this device.\n     * @param {DeviceKeyAlgorithmName} algorithm\n     * @returns {DeviceKey | undefined}\n     */\n    getKey(algorithm) {\n        const ret = wasm.device_getKey(this.__wbg_ptr, algorithm);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : DeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Get the Curve25519 key of the given device.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519Key() {\n        const ret = wasm.device_curve25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the Ed25519 key of the given device.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519Key() {\n        const ret = wasm.device_ed25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get a map containing all the device keys.\n     * @returns {Map<any, any>}\n     */\n    get keys() {\n        const ret = wasm.device_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the list of algorithms this device supports.\n     *\n     * Returns `Array<EncryptionAlgorithm>`.\n     * @returns {Array<any>}\n     */\n    get algorithms() {\n        const ret = wasm.device_algorithms(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get a map containing all the device signatures.\n     * @returns {Signatures}\n     */\n    get signatures() {\n        const ret = wasm.device_signatures(this.__wbg_ptr);\n        return Signatures.__wrap(ret);\n    }\n    /**\n     * Get the trust state of the device.\n     * @returns {LocalTrust}\n     */\n    get localTrustState() {\n        const ret = wasm.device_localTrustState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the device locally marked as trusted?\n     * @returns {boolean}\n     */\n    isLocallyTrusted() {\n        const ret = wasm.device_isLocallyTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device locally marked as blacklisted?\n     *\n     * Blacklisted devices won’t receive any group sessions.\n     * @returns {boolean}\n     */\n    isBlacklisted() {\n        const ret = wasm.device_isBlacklisted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device deleted?\n     * @returns {boolean}\n     */\n    isDeleted() {\n        const ret = wasm.device_isDeleted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Timestamp representing the first time this device has been seen (in\n     * milliseconds).\n     * @returns {bigint}\n     */\n    firstTimeSeen() {\n        const ret = wasm.device_firstTimeSeen(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * Mark this device as verified.\n     * Works only if the device is owned by the current user.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.device_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether or not the device is a dehydrated device.\n     * @returns {boolean}\n     */\n    get isDehydrated() {\n        const ret = wasm.device_isDehydrated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst DeviceIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deviceid_free(ptr >>> 0, 1));\n/**\n * A Matrix key ID.\n *\n * Device identifiers in Matrix are completely opaque character\n * sequences. This type is provided simply for its semantic value.\n */\nexport class DeviceId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deviceid_free(ptr, 0);\n    }\n    /**\n     * Create a new `DeviceId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.deviceid_new(ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        DeviceIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the device ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.deviceid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekey_free(ptr >>> 0, 1));\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n */\nexport class DeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekey_free(ptr, 0);\n    }\n    /**\n     * Get the name of the device key.\n     * @returns {DeviceKeyName}\n     */\n    get name() {\n        const ret = wasm.devicekey_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the value associated to the `Curve25519` device key name.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519() {\n        const ret = wasm.devicekey_curve25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Ed25519` device key name.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.devicekey_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Unknown` device key name.\n     * @returns {string | undefined}\n     */\n    get unknown() {\n        const ret = wasm.devicekey_unknown(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Convert the `DeviceKey` into a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyAlgorithmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyalgorithm_free(ptr >>> 0, 1));\n/**\n * The basic key algorithms in the specification.\n */\nexport class DeviceKeyAlgorithm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyAlgorithm.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyAlgorithmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyalgorithm_free(ptr, 0);\n    }\n    /**\n     * Read the device key algorithm's name. If the name is\n     * `Unknown`, one may be interested by the `to_string` method to\n     * read the original name.\n     * @returns {DeviceKeyAlgorithmName}\n     */\n    get name() {\n        const ret = wasm.devicekeyalgorithm_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Return the device key algorithm as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyalgorithm_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyid_free(ptr >>> 0, 1));\n/**\n * A Matrix device key ID.\n *\n * A key algorithm and a device ID, combined with a ‘:’.\n */\nexport class DeviceKeyId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `DeviceKeyId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.devicekeyid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceKeyIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns key algorithm of the device key ID.\n     * @returns {DeviceKeyAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.devicekeyid_algorithm(this.__wbg_ptr);\n        return DeviceKeyAlgorithm.__wrap(ret);\n    }\n    /**\n     * Returns device ID of the device key ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.devicekeyid_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Return the device key ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceListsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicelists_free(ptr >>> 0, 1));\n/**\n * Information on E2E device updates.\n */\nexport class DeviceLists {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceListsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicelists_free(ptr, 0);\n    }\n    /**\n     * Create an empty `DeviceLists`.\n     *\n     * `changed` and `left` must be an array of `UserId`.\n     *\n     * Items inside `changed` and `left` will be invalidated by this method. Be\n     * careful not to use the `UserId`s after this method has been called.\n     * @param {(UserId)[] | undefined} [changed]\n     * @param {(UserId)[] | undefined} [left]\n     */\n    constructor(changed, left) {\n        var ptr0 = isLikeNone(changed) ? 0 : passArrayJsValueToWasm0(changed, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(left) ? 0 : passArrayJsValueToWasm0(left, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.devicelists_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceListsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns true if there are no device list updates.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.devicelists_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * List of users who have updated their device identity keys or\n     * who now share an encrypted room with the client since the\n     * previous sync\n     * @returns {(UserId)[]}\n     */\n    get changed() {\n        const ret = wasm.devicelists_changed(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * List of users who no longer share encrypted rooms since the\n     * previous sync response.\n     * @returns {(UserId)[]}\n     */\n    get left() {\n        const ret = wasm.devicelists_left(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n}\n\nconst EciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ecies_free(ptr >>> 0, 1));\n/**\n * An unestablished ECIES session.\n */\nexport class Ecies {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ecies_free(ptr, 0);\n    }\n    /**\n     * Create a new, random, unestablished ECIES session.\n     *\n     * This method will use the\n     * [`MATRIX_QR_CODE_LOGIN`](https://github.com/matrix-org/matrix-spec-proposals/pull/4108)\n     * info for domain separation when creating the session.\n     */\n    constructor() {\n        const ret = wasm.ecies_new();\n        this.__wbg_ptr = ret >>> 0;\n        EciesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side to be able to\n     * establish an ECIES channel.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.ecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Create a [`EstablishedEcies`] from an initial message encrypted by the\n     * other side.\n     * @param {string} initial_message\n     * @returns {InboundCreationResult}\n     */\n    establish_inbound_channel(initial_message) {\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_inbound_channel(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return InboundCreationResult.__wrap(ret[0]);\n    }\n    /**\n     * Create an [`EstablishedEcies`] session using the other side's Curve25519\n     * public key and an initial plaintext.\n     *\n     * After the channel has been established, we can encrypt messages to send\n     * to the other side. The other side uses the initial message to\n     * establishes the same channel on its side.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} initial_message\n     * @returns {OutboundCreationResult}\n     */\n    establish_outbound_channel(public_key, initial_message) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_outbound_channel(this.__wbg_ptr, public_key.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return OutboundCreationResult.__wrap(ret[0]);\n    }\n}\n\nconst Ed25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519publickey_free(ptr >>> 0, 1));\n/**\n * An Ed25519 public key, used to verify digital signatures.\n */\nexport class Ed25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519publickey_free(ptr, 0);\n    }\n    /**\n     * The number of bytes an Ed25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.ed25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Ed25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Ed25519SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519signature_free(ptr >>> 0, 1));\n/**\n * An Ed25519 digital signature, can be used to verify the\n * authenticity of a message.\n */\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr, 0);\n    }\n    /**\n     * Try to create an Ed25519 signature from an unpadded base64\n     * representation.\n     * @param {string} signature\n     */\n    constructor(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ed25519signature_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Ed25519SignatureFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Serialize a Ed25519 signature to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst EmojiFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_emoji_free(ptr >>> 0, 1));\n/**\n * An emoji that is used for interactive verification using a short\n * auth string.\n *\n * This will contain a single emoji and description from the list of\n * emojis from [the specification].\n *\n * [the specification]: https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji\n */\nexport class Emoji {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Emoji.prototype);\n        obj.__wbg_ptr = ptr;\n        EmojiFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EmojiFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_emoji_free(ptr, 0);\n    }\n    /**\n     * The emoji symbol that represents a part of the short auth\n     * string, for example: 🐶\n     * @returns {string}\n     */\n    get symbol() {\n        const ret = wasm.emoji_symbol(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The description of the emoji, for example ‘Dog’.\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.emoji_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst EncryptedAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedattachment_free(ptr >>> 0, 1));\n/**\n * An encrypted attachment, usually created from `Attachment.encrypt`.\n */\nexport class EncryptedAttachment {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedAttachment.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedAttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedattachment_free(ptr, 0);\n    }\n    /**\n     * Create a new encrypted attachment manually.\n     *\n     * It needs encrypted data, stored in an `Uint8Array`, and a\n     * [media encryption\n     * information](https://docs.rs/matrix-sdk-crypto/latest/matrix_sdk_crypto/struct.MediaEncryptionInfo.html),\n     * as a JSON-encoded string.\n     *\n     * The media encryption information aren't stored as a string:\n     * they are parsed, validated and fully deserialized.\n     *\n     * See [the specification to learn\n     * more](https://spec.matrix.org/unstable/client-server-api/#extensions-to-mroommessage-msgtypes).\n     * @param {Uint8Array} encrypted_data\n     * @param {string} media_encryption_info\n     */\n    constructor(encrypted_data, media_encryption_info) {\n        const ptr0 = passArray8ToWasm0(encrypted_data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.encryptedattachment_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EncryptedAttachmentFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The actual encrypted data.\n     *\n     * **Warning**: It returns a **copy** of the entire encrypted\n     * data; be nice with your memory.\n     * @returns {Uint8Array}\n     */\n    get encryptedData() {\n        const ret = wasm.encryptedattachment_encryptedData(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Return the media encryption info as a JSON-encoded string. The\n     * structure is fully valid.\n     *\n     * If the media encryption info have been consumed already, it\n     * will return `null`.\n     * @returns {string | undefined}\n     */\n    get mediaEncryptionInfo() {\n        const ret = wasm.encryptedattachment_mediaEncryptionInfo(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Check whether the media encryption info has been consumed by\n     * `Attachment.decrypt` already.\n     * @returns {boolean}\n     */\n    get hasMediaEncryptionInfoBeenConsumed() {\n        const ret = wasm.encryptedattachment_hasMediaEncryptionInfoBeenConsumed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst EncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how an event was decrypted.\n */\nexport class EncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The user ID of the event sender. Note this is untrusted data\n     * unless `verification_state` is also trusted.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.encryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event. Note this\n     * is untrusted data unless `verification_state` is also\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.encryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.encryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.encryptioninfo_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     *\n     * # Arguments\n     *\n     * * `strict` - whether to enable \"strict mode\" verification. In non-strict\n     *   mode, unverified users are given no shield, and keys that have been\n     *   forwarded or restored from an insecure backup are given a grey shield\n     *   (both get a red shield in strict mode).\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.encryptioninfo_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst EncryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for an encrypted room.\n *\n * This determines the algorithm and rotation periods of a group\n * session.\n */\nexport class EncryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_encryptionsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_encryptionsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @returns {bigint}\n     */\n    get rotationPeriod() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriod(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @param {bigint} arg0\n     */\n    set rotationPeriod(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriod(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @returns {bigint}\n     */\n    get rotationPeriodMessages() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @param {bigint} arg0\n     */\n    set rotationPeriodMessages(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @returns {HistoryVisibility}\n     */\n    get historyVisibility() {\n        const ret = wasm.__wbg_get_encryptionsettings_historyVisibility(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @param {HistoryVisibility} arg0\n     */\n    set historyVisibility(arg0) {\n        wasm.__wbg_set_encryptionsettings_historyVisibility(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @returns {CollectStrategy}\n     */\n    get sharingStrategy() {\n        const ret = wasm.__wbg_get_encryptionsettings_sharingStrategy(this.__wbg_ptr);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @param {CollectStrategy} arg0\n     */\n    set sharingStrategy(arg0) {\n        _assertClass(arg0, CollectStrategy);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptionsettings_sharingStrategy(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Create a new `EncryptionSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.encryptionsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        EncryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst EstablishedEciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_establishedecies_free(ptr >>> 0, 1));\n/**\n * An established ECIES session.\n *\n * This session can be used to encrypt and decrypt messages between the two\n * sides of the channel.\n */\nexport class EstablishedEcies {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EstablishedEcies.prototype);\n        obj.__wbg_ptr = ptr;\n        EstablishedEciesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EstablishedEciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_establishedecies_free(ptr, 0);\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side so that it can\n     * complete the ECIES channel establishment.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.establishedecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Encrypt the given plaintext using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    encrypt(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_encrypt(this.__wbg_ptr, ptr0, len0);\n            deferred2_0 = ret[0];\n            deferred2_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypt the given message using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    decrypt(message) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_decrypt(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the [`CheckCode`] which uniquely identifies this\n     * [`EstablishedEcies`] session.\n     *\n     * This check code can be used to verify and confirm that both sides of the\n     * session are indeed using the same shared secret.\n     * @returns {CheckCode}\n     */\n    check_code() {\n        const ret = wasm.establishedecies_check_code(this.__wbg_ptr);\n        return CheckCode.__wrap(ret);\n    }\n}\n\nconst EventIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_eventid_free(ptr >>> 0, 1));\n/**\n * A Matrix [event ID].\n *\n * An `EventId` is generated randomly or converted from a string\n * slice, and can be converted back into a string as needed.\n *\n * [event ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class EventId {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EventIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eventid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `EventId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.eventid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EventIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the event's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the event ID.\n     * @returns {ServerName | undefined}\n     */\n    get serverName() {\n        const ret = wasm.eventid_serverName(this.__wbg_ptr);\n        return ret === 0 ? undefined : ServerName.__wrap(ret);\n    }\n    /**\n     * Return the event ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IdentityKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_identitykeys_free(ptr >>> 0, 1));\n/**\n * Struct holding the two public identity keys of an account.\n */\nexport class IdentityKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IdentityKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        IdentityKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IdentityKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_identitykeys_free(ptr, 0);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @returns {Ed25519PublicKey}\n     */\n    get ed25519() {\n        const ret = wasm.__wbg_get_identitykeys_ed25519(this.__wbg_ptr);\n        return Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @param {Ed25519PublicKey} arg0\n     */\n    set ed25519(arg0) {\n        _assertClass(arg0, Ed25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_ed25519(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @returns {Curve25519PublicKey}\n     */\n    get curve25519() {\n        const ret = wasm.__wbg_get_identitykeys_curve25519(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @param {Curve25519PublicKey} arg0\n     */\n    set curve25519(arg0) {\n        _assertClass(arg0, Curve25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_curve25519(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst InboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an inbound ECIES channel establishment.\n */\nexport class InboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The plaintext of the initial message.\n     * @returns {string}\n     */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_inboundcreationresult_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The plaintext of the initial message.\n     * @param {string} arg0\n     */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst InboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundgroupsession_free(ptr >>> 0, 1));\n/**\n * Inbound group session.\n *\n * Inbound group sessions are used to exchange room messages between a group of\n * participants. Inbound group sessions are used to decrypt the room messages.\n */\nexport class InboundGroupSession {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundGroupSession.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundGroupSessionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The room where this session is used in.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.inboundgroupsession_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the sender of this session, as a\n     * [Curve25519PublicKey].\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.inboundgroupsession_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Returns the unique identifier for this session.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.inboundgroupsession_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Has the session been imported from a file or server-side backup? As\n     * opposed to being directly received as an `m.room_key` event.\n     * @returns {boolean}\n     */\n    hasBeenImported() {\n        const ret = wasm.inboundgroupsession_hasBeenImported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst KeysBackupRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysbackuprequest_free(ptr >>> 0, 1));\n/**\n * A request that will back up a batch of room keys to the server\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3room_keyskeys\n */\nexport class KeysBackupRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysBackupRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysBackupRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysBackupRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysbackuprequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The backup version that these room keys should be part of.\n     * @returns {string}\n     */\n    get version() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysBackupRequest`.\n     * @param {string} id\n     * @param {string} body\n     * @param {string} version\n     */\n    constructor(id, body, version) {\n        const ret = wasm.keysbackuprequest_new(id, body, version);\n        this.__wbg_ptr = ret >>> 0;\n        KeysBackupRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysbackuprequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysClaimRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysclaimrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/claim` API endpoint\n * ([specification]).\n *\n * Claims one-time keys that can be used to establish 1-to-1 E2EE\n * sessions.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysclaim\n */\nexport class KeysClaimRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysClaimRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysClaimRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysClaimRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysclaimrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysclaimrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `one_time_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysclaimrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysClaimRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysClaimRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysclaimrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysQueryRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysqueryrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/query` API endpoint\n * ([specification]).\n *\n * Returns the current devices and identity keys for the given users.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysquery\n */\nexport class KeysQueryRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysQueryRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysQueryRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysQueryRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysqueryrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysqueryrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `device_keys`, `token`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysqueryrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysQueryRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysqueryrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysQueryRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysqueryrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysuploadrequest_free(ptr >>> 0, 1));\n/**\n * Outgoing Requests *\n * Data for a request to the `/keys/upload` API endpoint\n * ([specification]).\n *\n * Publishes end-to-end encryption keys for the device.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysupload\n */\nexport class KeysUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `device_keys`,\n     * `one_time_keys`, `fallback_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysUploadRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysuploadrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MaybeSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_maybesignature_free(ptr >>> 0, 1));\n/**\n * Represents a signature that is either valid _or_ that could not be\n * decoded.\n */\nexport class MaybeSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MaybeSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        MaybeSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MaybeSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_maybesignature_free(ptr, 0);\n    }\n    /**\n     * Check whether the signature has been successfully decoded.\n     * @returns {boolean}\n     */\n    isValid() {\n        const ret = wasm.maybesignature_isValid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Check whether the signature could not be successfully decoded.\n     * @returns {boolean}\n     */\n    isInvalid() {\n        const ret = wasm.maybesignature_isInvalid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The signature, if successfully decoded.\n     * @returns {Signature | undefined}\n     */\n    get signature() {\n        const ret = wasm.maybesignature_signature(this.__wbg_ptr);\n        return ret === 0 ? undefined : Signature.__wrap(ret);\n    }\n    /**\n     * The base64 encoded string that is claimed to contain a\n     * signature but could not be decoded, if any.\n     * @returns {string | undefined}\n     */\n    get invalidSignatureSource() {\n        const ret = wasm.maybesignature_invalidSignatureSource(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst MegolmDecryptionErrorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmdecryptionerror_free(ptr >>> 0, 1));\n/**\n * Js Decryption error with code.\n */\nexport class MegolmDecryptionError {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmDecryptionError.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmDecryptionErrorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmDecryptionErrorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmdecryptionerror_free(ptr, 0);\n    }\n    /**\n     * Description code for the error. See `DecryptionErrorCode`\n     * @returns {DecryptionErrorCode}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_code(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * detailed description\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_description(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Withheld code if any. Only for `UnknownMessageIndex` error code\n     * @returns {string | undefined}\n     */\n    get maybe_withheld() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MegolmV1BackupKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmv1backupkey_free(ptr >>> 0, 1));\n/**\n * The public part of the backup key.\n */\nexport class MegolmV1BackupKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmV1BackupKey.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmV1BackupKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmV1BackupKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmv1backupkey_free(ptr, 0);\n    }\n    /**\n     * The actual base64 encoded public key.\n     * @returns {string}\n     */\n    get publicKeyBase64() {\n        const ret = wasm.megolmv1backupkey_publicKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the full name of the backup algorithm this backup key supports.\n     * @returns {string}\n     */\n    get algorithm() {\n        const ret = wasm.megolmv1backupkey_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MigrationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_migration_free(ptr >>> 0, 1));\n/**\n * Migration routines\n *\n * The public methods are exposed as static methods on this class, for\n * namespacing and to enable easier mocking in unit tests.\n */\nexport class Migration {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MigrationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_migration_free(ptr, 0);\n    }\n    /**\n     * Import the base dataset from a libolm-based setup to a vodozemac-based\n     * setup stored in IndexedDB.\n     *\n     * Populates the user credentials, Olm account, backup data, etc. This is\n     * the first step in the migration process. Once this base data is\n     * imported, further data can be imported with {@link\n     * #migrateOlmSessions}, {@link #migrateMegolmSessions}, and TODO room settings.\n     *\n     * # Arguments\n     *\n     * * `data` - The data to be migrated\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   account objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {BaseMigrationData} data\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateBaseData(data, pickle_key, store_handle) {\n        _assertClass(data, BaseMigrationData);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateBaseData(data.__wbg_ptr, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Olm sessions of a libolm-based setup to a vodozemac-based setup\n     * stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link #migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledSession}s to import. Items\n     *   inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {(PickledSession)[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateOlmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateOlmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Megolm sessions of a libolm-based setup to a vodozemac-based\n     * setup stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link #migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledInboundGroupSession}s to\n     *   import. Items inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the\n     *   megolm session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {(PickledInboundGroupSession)[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateMegolmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateMegolmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst OlmMachineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_olmmachine_free(ptr >>> 0, 1));\n/**\n * State machine implementation of the Olm/Megolm encryption protocol\n * used for Matrix end to end encryption.\n */\nexport class OlmMachine {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OlmMachine.prototype);\n        obj.__wbg_ptr = ptr;\n        OlmMachineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OlmMachineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_olmmachine_free(ptr, 0);\n    }\n    /**\n     * Constructor will always fail. To create a new `OlmMachine`, please use\n     * the `initialize` method.\n     *\n     * Why this pattern? `initialize` returns a `Promise`. Returning a\n     */\n    constructor() {\n        const ret = wasm.olmmachine_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        OlmMachineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Create a new `OlmMachine`.\n     *\n     * The created machine will keep the encryption keys either in a IndexedDB\n     * based store, or in a memory store and once the objects is dropped,\n     * the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `OlmMachine` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   IndexedDB-based store.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {string | undefined} [store_name]\n     * @param {string | undefined} [store_passphrase]\n     * @returns {Promise<any>}\n     */\n    static initialize(user_id, device_id, store_name, store_passphrase) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_initialize(user_id.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Create a new `OlmMachine` backed by an existing store.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_handle` - the connection to the crypto store to be used for\n     *   this machine.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static initFromStore(user_id, device_id, store_handle) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.olmmachine_initFromStore(user_id.__wbg_ptr, device_id.__wbg_ptr, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The unique user ID that owns this `OlmMachine` instance.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.olmmachine_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique device ID that identifies this `OlmMachine`.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.olmmachine_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * The time, in milliseconds since the unix epoch, at which the `Account`\n     * backing this `OlmMachine` was created.\n     *\n     * An `Account` is created when an `OlmMachine` is first instantiated\n     * against a given `Store`, at which point it creates identity keys etc.\n     * This method returns the timestamp, according to the local clock, at\n     * which that happened.\n     * @returns {number}\n     */\n    get deviceCreationTimeMs() {\n        const ret = wasm.olmmachine_deviceCreationTimeMs(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public parts of our Olm identity keys.\n     * @returns {IdentityKeys}\n     */\n    get identityKeys() {\n        const ret = wasm.olmmachine_identityKeys(this.__wbg_ptr);\n        return IdentityKeys.__wrap(ret);\n    }\n    /**\n     * Get the display name of our own device.\n     * @returns {Promise<any>}\n     */\n    get displayName() {\n        const ret = wasm.olmmachine_displayName(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether automatic transmission of room key requests is enabled.\n     *\n     * Room key requests allow the device to request room keys that it might\n     * have missed in the original share using `m.room_key_request`\n     * events.\n     * @returns {boolean}\n     */\n    get roomKeyRequestsEnabled() {\n        const ret = wasm.olmmachine_roomKeyRequestsEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable automatic transmission of room key requests.\n     * @param {boolean} enabled\n     */\n    set roomKeyRequestsEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyRequestsEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Whether room key forwarding is enabled.\n     *\n     * If room key forwarding is enabled, we will automatically reply to\n     * incoming `m.room_key_request` messages from verified devices by\n     * forwarding the requested key (if we have it).\n     * @returns {boolean}\n     */\n    get roomKeyForwardingEnabled() {\n        const ret = wasm.olmmachine_roomKeyForwardingEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable room key forwarding.\n     * @param {boolean} enabled\n     */\n    set roomKeyForwardingEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyForwardingEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Get the list of users whose devices we are currently tracking.\n     *\n     * A user can be marked for tracking using the\n     * [`update_tracked_users`](#method.update_tracked_users) method.\n     *\n     * Returns a `Set<UserId>`.\n     * @returns {Promise<any>}\n     */\n    trackedUsers() {\n        const ret = wasm.olmmachine_trackedUsers(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Update the list of tracked users.\n     *\n     * The OlmMachine maintains a list of users whose devices we are keeping\n     * track of: these are known as \"tracked users\". These must be users\n     * that we share a room with, so that the server sends us updates for\n     * their device lists.\n     *\n     * # Arguments\n     *\n     * * `users` - An array of user ids that should be added to the list of\n     *   tracked users\n     *\n     * Any users that hadn't been seen before will be flagged for a key query\n     * immediately, and whenever `receive_sync_changes` receives a\n     * \"changed\" notification for that user in the future.\n     *\n     * Users that were already in the list are unaffected.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {(UserId)[]} users\n     * @returns {Promise<any>}\n     */\n    updateTrackedUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_updateTrackedUsers(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Mark all tracked users as dirty.\n     *\n     * All users *whose device lists we are tracking* are flagged as needing a\n     * key query. Users whose devices we are not tracking are ignored.\n     * @returns {Promise<void>}\n     */\n    markAllTrackedUsersAsDirty() {\n        const ret = wasm.olmmachine_markAllTrackedUsersAsDirty(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Handle to-device events and one-time key counts from a sync\n     * response.\n     *\n     * This will decrypt and handle to-device events returning the\n     * decrypted versions of them.\n     *\n     * To decrypt an event from the room timeline call\n     * `decrypt_room_event`.\n     *\n     * # Arguments\n     *\n     * * `to_device_events`: the JSON-encoded to-device evens from the `/sync`\n     *   response\n     * * `changed_devices`: the mapping of changed and left devices, from the\n     *   `/sync` response\n     * * `one_time_keys_counts`: The number of one-time keys on the server,\n     *   from the `/sync` response. A `Map` from string (encryption algorithm)\n     *   to number (number of keys).\n     * * `unused_fallback_keys`: Optionally, a `Set` of unused fallback keys on\n     *   the server, from the `/sync` response. If this is set, it is used to\n     *   determine if new fallback keys should be uploaded.\n     *\n     * # Returns\n     *\n     * A list of JSON strings, containing the decrypted to-device events.\n     * @param {string} to_device_events\n     * @param {DeviceLists} changed_devices\n     * @param {Map<any, any>} one_time_keys_counts\n     * @param {Set<any> | undefined} [unused_fallback_keys]\n     * @returns {Promise<any>}\n     */\n    receiveSyncChanges(to_device_events, changed_devices, one_time_keys_counts, unused_fallback_keys) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(changed_devices, DeviceLists);\n        const ret = wasm.olmmachine_receiveSyncChanges(this.__wbg_ptr, ptr0, len0, changed_devices.__wbg_ptr, one_time_keys_counts, isLikeNone(unused_fallback_keys) ? 0 : addToExternrefTable0(unused_fallback_keys));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the outgoing requests that need to be sent out.\n     *\n     * This returns a list of values, each of which can be any of:\n     *   * {@link KeysUploadRequest},\n     *   * {@link KeysQueryRequest},\n     *   * {@link KeysClaimRequest},\n     *   * {@link ToDeviceRequest},\n     *   * {@link SignatureUploadRequest},\n     *   * {@link RoomMessageRequest}, or\n     *   * {@link KeysBackupRequest}.\n     *\n     * Those requests need to be sent out to the server and the\n     * responses need to be passed back to the state machine\n     * using {@link OlmMachine.markRequestAsSent}.\n     * @returns {Promise<any>}\n     */\n    outgoingRequests() {\n        const ret = wasm.olmmachine_outgoingRequests(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Mark the request with the given request ID as sent (see\n     * `outgoing_requests`).\n     *\n     * Arguments are:\n     *\n     * * `request_id` represents the unique ID of the request that was sent\n     *   out. This is needed to couple the response with the now sent out\n     *   request.\n     * * `response_type` represents the type of the request that was sent out.\n     * * `response` represents the response that was received from the server\n     *   after the outgoing request was sent out.\n     * @param {string} request_id\n     * @param {RequestType} request_type\n     * @param {string} response\n     * @returns {Promise<any>}\n     */\n    markRequestAsSent(request_id, request_type, response) {\n        const ptr0 = passStringToWasm0(request_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(response, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_markRequestAsSent(this.__wbg_ptr, ptr0, len0, request_type, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a room message for the given room.\n     *\n     * **Note**: A room key needs to be shared with the group of users that are\n     * members in the given room. If this is not done this method will panic.\n     *\n     * The usual flow to encrypt an event using this state machine is as\n     * follows:\n     *\n     * 1. Get the one-time key claim request to establish 1:1 Olm sessions for\n     *    the room members of the room we wish to participate in. This is done\n     *    using the [`get_missing_sessions()`](Self::get_missing_sessions)\n     *    method. This method call should be locked per call.\n     *\n     * 2. Share a room key with all the room members using the\n     *    [`share_room_key()`](Self::share_room_key). This method call should\n     *    be locked per room.\n     *\n     * 3. Encrypt the event using this method.\n     *\n     * 4. Send the encrypted event to the server.\n     *\n     * After the room key is shared steps 1 and 2 will become noops, unless\n     * there's some changes in the room membership or in the list of devices a\n     * member has.\n     *\n     *\n     * `room_id` is the ID of the room for which the message should\n     * be encrypted. `event_type` is the type of the event. `content`\n     * is the plaintext content of the message that should be\n     * encrypted.\n     *\n     * # Panics\n     *\n     * Panics if a group session for the given room wasn't shared\n     * beforehand.\n     * @param {RoomId} room_id\n     * @param {string} event_type\n     * @param {string} content\n     * @returns {Promise<any>}\n     */\n    encryptRoomEvent(room_id, event_type, content) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_encryptRoomEvent(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Decrypt an event from a room timeline.\n     *\n     * # Arguments\n     *\n     * * `event`, the event that should be decrypted.\n     * * `room_id`, the ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * A `Promise` which resolves to a {@link DecryptedRoomEvent} instance, or\n     * rejects with a {@link MegolmDecryptionError} instance.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @param {DecryptionSettings} decryption_settings\n     * @returns {Promise<any>}\n     */\n    decryptRoomEvent(event, room_id, decryption_settings) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        _assertClass(decryption_settings, DecryptionSettings);\n        const ret = wasm.olmmachine_decryptRoomEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr, decryption_settings.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get encryption info for a decrypted timeline event.\n     *\n     * This recalculates the `EncryptionInfo` data that is returned by\n     * `decryptRoomEvent`, based on the current\n     * verification status of the sender, etc.\n     *\n     * Returns an error for an unencrypted event.\n     *\n     * # Arguments\n     *\n     * * `event` - The event to get information for.\n     * * `room_id` - The ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * {@link EncryptionInfo}\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomEventEncryptionInfo(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomEventEncryptionInfo(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the status of the private cross signing keys.\n     *\n     * This can be used to check which private cross signing keys we\n     * have stored locally.\n     * @returns {Promise<any>}\n     */\n    crossSigningStatus() {\n        const ret = wasm.olmmachine_crossSigningStatus(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Export all the secrets we have in the store into a {@link\n     * SecretsBundle}.\n     *\n     * This method will export all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version.\n     *\n     * The method will fail if we don't have all three private cross-signing\n     * keys available.\n     *\n     * **Warning**: Only export this and share it with a trusted recipient,\n     * i.e. if an existing device is sharing this with a new device.\n     * @returns {Promise<SecretsBundle>}\n     */\n    exportSecretsBundle() {\n        const ret = wasm.olmmachine_exportSecretsBundle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import and persists secrets from a {@link SecretsBundle}.\n     *\n     * This method will import all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version into the store.\n     *\n     * **Warning**: Only import this from a trusted source, i.e. if an existing\n     * device is sharing this with a new device. The imported cross-signing\n     * keys will create a {@link OwnUserIdentity} and mark it as verified.\n     *\n     * The backup key will be persisted in the store and can be enabled using\n     * the {@link BackupMachine}.\n     *\n     * The provided `SecretsBundle` is freed by this method; be careful not to\n     * use it once this method has been called.\n     * @param {SecretsBundle} bundle\n     * @returns {Promise<void>}\n     */\n    importSecretsBundle(bundle) {\n        _assertClass(bundle, SecretsBundle);\n        var ptr0 = bundle.__destroy_into_raw();\n        const ret = wasm.olmmachine_importSecretsBundle(this.__wbg_ptr, ptr0);\n        return ret;\n    }\n    /**\n     * Export all the private cross signing keys we have.\n     *\n     * The export will contain the seeds for the ed25519 keys as\n     * unpadded base64 encoded strings.\n     *\n     * Returns `null` if we don’t have any private cross signing keys;\n     * otherwise returns a `CrossSigningKeyExport`.\n     * @returns {Promise<any>}\n     */\n    exportCrossSigningKeys() {\n        const ret = wasm.olmmachine_exportCrossSigningKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import our private cross signing keys.\n     *\n     * The keys should be provided as unpadded-base64-encoded strings.\n     *\n     * Returns a `CrossSigningStatus`.\n     * @param {string | undefined} [master_key]\n     * @param {string | undefined} [self_signing_key]\n     * @param {string | undefined} [user_signing_key]\n     * @returns {Promise<any>}\n     */\n    importCrossSigningKeys(master_key, self_signing_key, user_signing_key) {\n        var ptr0 = isLikeNone(master_key) ? 0 : passStringToWasm0(master_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(self_signing_key) ? 0 : passStringToWasm0(self_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(user_signing_key) ? 0 : passStringToWasm0(user_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importCrossSigningKeys(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        return ret;\n    }\n    /**\n     * Create a new cross signing identity and get the upload request\n     * to push the new public keys to the server.\n     *\n     * Warning: This will delete any existing cross signing keys that\n     * might exist on the server and thus will reset the trust\n     * between all the devices.\n     *\n     * Uploading these keys will require user interactive auth.\n     *\n     * # Arguments\n     *\n     * * `reset`, whether the method should create a new identity or use the\n     *   existing one during the request. If set to true, the request will\n     *   attempt to upload a new identity. If set to false, the request will\n     *   attempt to upload the existing identity. Since the uploading process\n     *   requires user interactive authentication, which involves sending out\n     *   the same request multiple times, setting this argument to false\n     *   enables you to reuse the same request.\n     *\n     * Returns a {@link CrossSigningBootstrapRequests}.\n     * @param {boolean} reset\n     * @returns {Promise<any>}\n     */\n    bootstrapCrossSigning(reset) {\n        const ret = wasm.olmmachine_bootstrapCrossSigning(this.__wbg_ptr, reset);\n        return ret;\n    }\n    /**\n     * Get the cross signing user identity of a user.\n     *\n     * Returns a promise for an {@link identities.OwnUserIdentity}, a\n     * {@link identities.OtherUserIdentity}, or `undefined`.\n     * @param {UserId} user_id\n     * @returns {Promise<any>}\n     */\n    getIdentity(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getIdentity(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sign the given message using our device key and if available\n     * cross-signing master key.\n     * @param {string} message\n     * @returns {Promise<any>}\n     */\n    sign(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_sign(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Invalidate the currently active outbound group session for the\n     * given room.\n     *\n     * Returns true if a session was invalidated, false if there was\n     * no session to invalidate.\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    invalidateGroupSession(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_invalidateGroupSession(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get to-device requests to share a room key with users in a room.\n     *\n     * `room_id` is the room ID. `users` is an array of `UserId`\n     * objects. `encryption_settings` are an `EncryptionSettings`\n     * object.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight for the same room, e.g. using a lock.\n     *\n     * Returns an array of `ToDeviceRequest`s.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {RoomId} room_id\n     * @param {(UserId)[]} users\n     * @param {EncryptionSettings} encryption_settings\n     * @returns {Promise<any>}\n     */\n    shareRoomKey(room_id, users, encryption_settings) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(encryption_settings, EncryptionSettings);\n        const ret = wasm.olmmachine_shareRoomKey(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, encryption_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate an \"out-of-band\" key query request for the given set of users.\n     *\n     * This can be useful if we need the results from `getIdentity` or\n     * `getUserDevices` to be as up-to-date as possible.\n     *\n     * Returns a `KeysQueryRequest` object. The response of the request should\n     * be passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {(UserId)[]} users\n     * @returns {KeysQueryRequest}\n     */\n    queryKeysForUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_queryKeysForUsers(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return KeysQueryRequest.__wrap(ret[0]);\n    }\n    /**\n     * Get the a key claiming request for the user/device pairs that\n     * we are missing Olm sessions for.\n     *\n     * Returns `null` if no key claiming request needs to be sent\n     * out, otherwise it returns a `KeysClaimRequest` object.\n     *\n     * Sessions need to be established between devices so group\n     * sessions for a room can be shared with them.\n     *\n     * This should be called every time a group session needs to be\n     * shared as well as between sync calls. After a sync some\n     * devices may request room keys without us having a valid Olm\n     * session with them, making it impossible to server the room key\n     * request, thus it’s necessary to check for missing sessions\n     * between sync as well.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight, e.g. using a lock.\n     *\n     * The response of a successful key claiming requests needs to be\n     * passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * `users` represents the list of users that we should check if\n     * we lack a session with one of their devices. This can be an\n     * empty iterator when calling this method between sync requests.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {(UserId)[]} users\n     * @returns {Promise<any>}\n     */\n    getMissingSessions(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getMissingSessions(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get a map holding all the devices of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * A {@link UserDevices} object.\n     * @param {UserId} user_id\n     * @param {number | undefined} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getUserDevices(user_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getUserDevices(this.__wbg_ptr, user_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a specific device of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `device_id` - The unique ID of the device.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * If the device is known, a {@link Device}. Otherwise, `undefined`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {number | undefined} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getDevice(user_id, device_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.olmmachine_getDevice(this.__wbg_ptr, user_id.__wbg_ptr, device_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a verification object for the given user ID with the given\n     * flow ID (a to-device request ID if the verification has been\n     * requested by a to-device request, or a room event ID if the\n     * verification has been requested by a room event).\n     *\n     * It returns a “`Verification` object”, which is either a `Sas`\n     * or `Qr` object.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {any}\n     */\n    getVerification(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerification(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get a verification request object with the given flow ID.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {VerificationRequest | undefined}\n     */\n    getVerificationRequest(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerificationRequest(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        return ret === 0 ? undefined : VerificationRequest.__wrap(ret);\n    }\n    /**\n     * Get all the verification requests of a given user.\n     * @param {UserId} user_id\n     * @returns {Array<any>}\n     */\n    getVerificationRequests(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getVerificationRequests(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Receive a verification event.\n     *\n     * This method can be used to pass verification events that are happening\n     * in rooms to the `OlmMachine`. The event should be in the decrypted form.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    receiveVerificationEvent(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_receiveVerificationEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Export the keys that match the given predicate.\n     *\n     * `predicate` is a closure that will be called for every known\n     * `InboundGroupSession`, which represents a room key. If the closure\n     * returns `true`, the `InboundGroupSession` will be included in the\n     * export; otherwise it won't.\n     *\n     * Returns a Promise containing a Result containing a String which is a\n     * JSON-encoded array of ExportedRoomKey objects.\n     * @param {Function} predicate\n     * @returns {Promise<any>}\n     */\n    exportRoomKeys(predicate) {\n        const ret = wasm.olmmachine_exportRoomKeys(this.__wbg_ptr, predicate);\n        return ret;\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * Mostly, a deprecated alias for `importExportedRoomKeys`, though the\n     * return type is different.\n     *\n     * Returns a String containing a JSON-encoded object, holding three\n     * properties:\n     *  * `total_count` (the total number of keys found in the export data).\n     *  * `imported_count` (the number of keys that were imported).\n     *  * `keys` (the keys that were imported; a map from room id to a map of\n     *    the sender key to a list of session ids).\n     *\n     * @deprecated Use `importExportedRoomKeys` or `importBackedUpRoomKeys`.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * `exported_keys` is a JSON-encoded list of previously exported keys that\n     * should be imported into our store. If we already have a better\n     * version of a key, the key will _not_ be imported.\n     *\n     * `progress_listener` is a closure that takes 2 `BigInt` arguments:\n     * `progress` and `total`, and returns nothing.\n     *\n     * Returns a {@link RoomKeyImportResult}.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importExportedRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importExportedRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * # Arguments\n     *\n     * * `backed_up_room_keys`: keys that were retrieved from backup and that\n     *   should be added to our store (provided they are better than our\n     *   current versions of those keys). Specifically, it should be a Map from\n     *   {@link RoomId}, to a Map from session ID to a (decrypted) session data\n     *   structure.\n     *\n     * * `progress_listener`: an optional callback that takes 3 arguments:\n     *   `progress` (the number of keys that have successfully been imported),\n     *   `total` (the total number of keys), and `failures` (the number of keys\n     *   that failed to import), and returns nothing.\n     *\n     * # Returns\n     *\n     * A {@link RoomKeyImportResult}.\n     * @param {Map<any, any>} backed_up_room_keys\n     * @param {Function | undefined} progress_listener\n     * @param {string} backup_version\n     * @returns {Promise<any>}\n     */\n    importBackedUpRoomKeys(backed_up_room_keys, progress_listener, backup_version) {\n        const ptr0 = passStringToWasm0(backup_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importBackedUpRoomKeys(this.__wbg_ptr, backed_up_room_keys, isLikeNone(progress_listener) ? 0 : addToExternrefTable0(progress_listener), ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Store the backup decryption key in the crypto store.\n     *\n     * This is useful if the client wants to support gossiping of the backup\n     * key.\n     *\n     * Returns `Promise<void>`.\n     * @param {BackupDecryptionKey} decryption_key\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    saveBackupDecryptionKey(decryption_key, version) {\n        _assertClass(decryption_key, BackupDecryptionKey);\n        const ptr0 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_saveBackupDecryptionKey(this.__wbg_ptr, decryption_key.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the backup keys we have saved in our store.\n     * Returns a `Promise` for {@link BackupKeys}.\n     * @returns {Promise<any>}\n     */\n    getBackupKeys() {\n        const ret = wasm.olmmachine_getBackupKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Check if the given backup has been verified by us or by another of our\n     * devices that we trust.\n     *\n     * The `backup_info` should be a Javascript object with the following\n     * format:\n     *\n     * ```json\n     * {\n     *     \"algorithm\": \"m.megolm_backup.v1.curve25519-aes-sha2\",\n     *     \"auth_data\": {\n     *         \"public_key\":\"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM\",\n     *         \"signatures\": {}\n     *     }\n     * }\n     * ```\n     *\n     * Returns a {@link SignatureVerification} object.\n     * @param {any} backup_info\n     * @returns {Promise<any>}\n     */\n    verifyBackup(backup_info) {\n        const ret = wasm.olmmachine_verifyBackup(this.__wbg_ptr, backup_info);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Activate the given backup key to be used with the given backup version.\n     *\n     * **Warning**: The caller needs to make sure that the given `BackupKey` is\n     * trusted, otherwise we might be encrypting room keys that a malicious\n     * party could decrypt.\n     *\n     * The {@link #verifyBackup} method can be used to do so.\n     *\n     * Returns `Promise<void>`.\n     * @param {string} public_key_base_64\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    enableBackupV1(public_key_base_64, version) {\n        const ptr0 = passStringToWasm0(public_key_base_64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_enableBackupV1(this.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Are we able to encrypt room keys.\n     *\n     * This returns true if we have an active `BackupKey` and backup version\n     * registered with the state machine.\n     *\n     * Returns `Promise<bool>`.\n     * @returns {Promise<any>}\n     */\n    isBackupEnabled() {\n        const ret = wasm.olmmachine_isBackupEnabled(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Disable and reset our backup state.\n     *\n     * This will remove any pending backup request, remove the backup key and\n     * reset the backup state of each room key we have.\n     *\n     * Returns `Promise<void>`.\n     * @returns {Promise<any>}\n     */\n    disableBackup() {\n        const ret = wasm.olmmachine_disableBackup(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt a batch of room keys and return a request that needs to be sent\n     * out to backup the room keys.\n     *\n     * Returns an optional {@link KeysBackupRequest}.\n     * @returns {Promise<any>}\n     */\n    backupRoomKeys() {\n        const ret = wasm.olmmachine_backupRoomKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the number of backed up room keys and the total number of room keys.\n     * Returns a {@link RoomKeyCounts}.\n     * @returns {Promise<any>}\n     */\n    roomKeyCounts() {\n        const ret = wasm.olmmachine_roomKeyCounts(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt the list of exported room keys using the given passphrase.\n     *\n     * `exported_room_keys` is a list of sessions that should be encrypted\n     * (it's generally returned by `export_room_keys`). `passphrase` is the\n     * passphrase that will be used to encrypt the exported room keys. And\n     * `rounds` is the number of rounds that should be used for the key\n     * derivation when the passphrase gets turned into an AES key. More rounds\n     * are increasingly computationnally intensive and as such help against\n     * brute-force attacks. Should be at least `10_000`, while values in the\n     * `100_000` ranges should be preferred.\n     * @param {string} exported_room_keys\n     * @param {string} passphrase\n     * @param {number} rounds\n     * @returns {string}\n     */\n    static encryptExportedRoomKeys(exported_room_keys, passphrase, rounds) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_encryptExportedRoomKeys(ptr0, len0, ptr1, len1, rounds);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Try to decrypt a reader into a list of exported room keys.\n     *\n     * `encrypted_exported_room_keys` is the result from\n     * `encrypt_exported_room_keys`. `passphrase` is the passphrase that was\n     * used when calling `encrypt_exported_room_keys`.\n     * @param {string} encrypted_exported_room_keys\n     * @param {string} passphrase\n     * @returns {string}\n     */\n    static decryptExportedRoomKeys(encrypted_exported_room_keys, passphrase) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(encrypted_exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_decryptExportedRoomKeys(ptr0, len0, ptr1, len1);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a room key.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeyUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeyUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever we receive a\n     * notification that some room keys have been withheld.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyWithheldInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeysWithheldCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeysWithheldCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a user identity.\n     *\n     * `callback` should be a function that takes a single argument (a {@link\n     * UserId}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerUserIdentityUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerUserIdentityUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a device.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of user IDs as strings) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerDevicesUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerDevicesUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever a secret\n     * (`m.secret.send`) is received.\n     *\n     * The only secret this will currently broadcast is the\n     * `m.megolm_backup.v1` (the cross signing secrets are handled internally).\n     *\n     * To request a secret from other devices, a client sends an\n     * `m.secret.request` device event with `action` set to `request` and\n     * `name` set to the identifier of the secret. A device that wishes to\n     * share the secret will reply with an `m.secret.send` event, encrypted\n     * using olm.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from a one of the user's own verified devices.\n     *\n     * See https://matrix-org.github.io/matrix-rust-sdk/matrix_sdk_crypto/store/struct.Store.html#method.secrets_stream for more information.\n     *\n     * `callback` should be a function that takes 2 arguments: the secret name\n     * (string) and value (string).\n     *\n     * **Note**: if the secret is valid and handled on the javascript side, the\n     * secret inbox should be cleared by calling\n     * `delete_secrets_from_inbox`.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerReceiveSecretCallback(callback) {\n        const ret = wasm.olmmachine_registerReceiveSecretCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Get all the secrets with the given secret_name we have currently\n     * stored.\n     * The only secret this will currently return is the\n     * `m.megolm_backup.v1` secret.\n     *\n     * Usually you would just register a callback with\n     * [`register_receive_secret_callback`], but if the client is shut down\n     * before handling them, this method can be used to retrieve them.\n     * This method should therefore be called at client startup to retrieve any\n     * secrets received during the previous session.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from one of the user's own verified devices.\n     *\n     * Returns a `Promise` for a `Set` of `String` corresponding to the secret\n     * values.\n     *\n     * If the secret is valid and handled, the secret inbox should be cleared\n     * by calling `delete_secrets_from_inbox`.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    getSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Delete all secrets with the given secret name from the inbox.\n     *\n     * Should be called after handling the secrets with\n     * `get_secrets_from_inbox`.\n     *\n     * # Arguments\n     *\n     * * `secret_name` - The name of the secret to delete.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    deleteSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_deleteSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Request missing local secrets from our other trusted devices.\n     *\n     * \"Local secrets\" refers to secrets which can be shared between trusted\n     * devices, such as private cross-signing keys, and the megolm backup\n     * decryption key.\n     *\n     * This method will cause the sdk to generated outgoing secret requests\n     * (`m.secret.request`) to get the missing secrets. These requests will\n     * then be returned by a future call to {@link\n     * OlmMachine#outgoing_requests}.\n     *\n     * # Returns\n     *\n     * A `Promise` for a `bool` result, which will be true if  secrets were\n     * missing, and a request was generated.\n     * @returns {Promise<Promise<any>>}\n     */\n    requestMissingSecretsIfNeeded() {\n        const ret = wasm.olmmachine_requestMissingSecretsIfNeeded(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the stored room settings, such as the encryption algorithm or\n     * whether to encrypt only for trusted devices.\n     *\n     * These settings can be modified via {@link #setRoomSettings}.\n     *\n     * # Returns\n     *\n     * `Promise<RoomSettings|undefined>`\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomSettings(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store encryption settings for the given room.\n     *\n     * This method checks if the new settings are \"safe\" -- ie, that they do\n     * not represent a downgrade in encryption security from any previous\n     * settings. Attempts to downgrade security will result in an error.\n     *\n     * If the settings are valid, they will be persisted to the crypto store.\n     * These settings are not used directly by this library, but the saved\n     * settings can be retrieved via {@link #getRoomSettings}.\n     * @param {RoomId} room_id\n     * @param {RoomSettings} room_settings\n     * @returns {Promise<void>}\n     */\n    setRoomSettings(room_id, room_settings) {\n        _assertClass(room_id, RoomId);\n        _assertClass(room_settings, RoomSettings);\n        const ret = wasm.olmmachine_setRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr, room_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Manage dehydrated devices\n     * @returns {DehydratedDevices}\n     */\n    dehydratedDevices() {\n        const ret = wasm.olmmachine_dehydratedDevices(this.__wbg_ptr);\n        return DehydratedDevices.__wrap(ret);\n    }\n    /**\n     * Shut down the `OlmMachine`.\n     *\n     * The `OlmMachine` cannot be used after this method has been called.\n     *\n     * All associated resources will be closed too, like IndexedDB\n     * connections.\n     */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        wasm.olmmachine_close(ptr);\n    }\n}\n\nconst OtherUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_otheruseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that isn't our own. Other users will\n * only contain a master key and a self signing key, meaning that only device\n * signatures can be checked with this identity.\n *\n * This struct wraps a read-only version of the struct and allows verifications\n * to be requested to verify our own device with the user identity.\n */\nexport class OtherUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OtherUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OtherUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OtherUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_otheruseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.otheruseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Manually verify this user.\n     *\n     * This method will attempt to sign the user identity using our private\n     * cross signing key.\n     *\n     * This method fails if we don't have the private part of our user-signing\n     * key.\n     *\n     * Returns a request that needs to be sent out for the user to be marked as\n     * verified.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.otheruseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a `VerificationRequest` object after the verification\n     * request content has been sent out.\n     * @param {RoomId} room_id\n     * @param {EventId} request_event_id\n     * @param {any[] | undefined} [methods]\n     * @returns {VerificationRequest}\n     */\n    requestVerification(room_id, request_event_id, methods) {\n        _assertClass(room_id, RoomId);\n        _assertClass(request_event_id, EventId);\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.otheruseridentity_requestVerification(this.__wbg_ptr, room_id.__wbg_ptr, request_event_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return VerificationRequest.__wrap(ret[0]);\n    }\n    /**\n     * Send a verification request to the given user.\n     *\n     * The returned content needs to be sent out into a DM room with the given\n     * user.\n     *\n     * After the content has been sent out a VerificationRequest can be started\n     * with the `request_verification` method.\n     * @param {any[] | undefined} [methods]\n     * @returns {string}\n     */\n    verificationRequestContent(methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.otheruseridentity_verificationRequestContent(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Pin the current identity (public part of the master signing key).\n     * @returns {Promise<any>}\n     */\n    pinCurrentMasterKey() {\n        const ret = wasm.otheruseridentity_pinCurrentMasterKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the identity changed in a way that requires approval from the user?\n     *\n     * A user identity needs approval if it changed after the crypto machine\n     * has already observed (\"pinned\") a different identity for that user,\n     * unless it is an explicitly verified identity (using for example\n     * interactive verification).\n     *\n     * This situation can be resolved by:\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Updating the pin to the new identity with {@link pinCurrentMasterKey}.\n     * @returns {boolean}\n     */\n    identityNeedsUserApproval() {\n        const ret = wasm.otheruseridentity_identityNeedsUserApproval(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * True if we verified this identity (with any own identity, at any\n     * point).\n     *\n     * To set this latch back to false, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.otheruseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not anymore it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.otheruseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.otheruseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst OutboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_outboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an outbound ECIES channel establishment.\n */\nexport class OutboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OutboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        OutboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_outboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The initial encrypted message.\n     * @returns {string}\n     */\n    get initial_message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_outboundcreationresult_initial_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The initial encrypted message.\n     * @param {string} arg0\n     */\n    set initial_message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OwnUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ownuseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that is our own.\n */\nexport class OwnUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OwnUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OwnUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OwnUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ownuseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.ownuseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Mark our user identity as verified.\n     *\n     * This will mark the identity locally as verified and sign it with our own\n     * device.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.ownuseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Send a verification request to our other devices.\n     * @param {any[] | undefined} [methods]\n     * @returns {Promise<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ownuseridentity_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Does our user identity trust our own device, i.e. have we signed our own\n     * device keys with our self-signing key?\n     * @returns {Promise<any>}\n     */\n    trustsOurOwnDevice() {\n        const ret = wasm.ownuseridentity_trustsOurOwnDevice(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the user-signing key of the identity. This is only present for our\n     * own user identity.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_userSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * True if we verified our own identity at some point in the past.\n     *\n     * To reset this latch back to `false`, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.ownuseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not any longer, it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.ownuseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.ownuseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst PickledInboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledinboundgroupsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of an `InboundGroupSession`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an InboundGroupSession.\n */\nexport class PickledInboundGroupSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledInboundGroupSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledInboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledinboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @returns {string | undefined}\n     */\n    get senderSigningKey() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_senderSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @param {string | undefined} [arg0]\n     */\n    set senderSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @param {RoomId | undefined} [arg0]\n     */\n    set roomId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RoomId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_pickledinboundgroupsession_roomId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @returns {boolean}\n     */\n    get imported() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_imported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @param {boolean} arg0\n     */\n    set imported(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_imported(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @returns {boolean}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_backedUp(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @param {boolean} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_backedUp(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledInboundGroupSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledinboundgroupsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledInboundGroupSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PickledSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of a `Session`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an Olm Session. Can be imported into the rust store with {@link\n * #migrateOlmSessions}.\n */\nexport class PickledSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @returns {boolean}\n     */\n    get createdUsingFallbackKey() {\n        const ret = wasm.__wbg_get_pickledsession_createdUsingFallbackKey(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @param {boolean} arg0\n     */\n    set createdUsingFallbackKey(arg0) {\n        wasm.__wbg_set_pickledsession_createdUsingFallbackKey(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was created.\n     * @returns {Date}\n     */\n    get creationTime() {\n        const ret = wasm.__wbg_get_pickledsession_creationTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was created.\n     * @param {Date} arg0\n     */\n    set creationTime(arg0) {\n        wasm.__wbg_set_pickledsession_creationTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was last used.\n     * @returns {Date}\n     */\n    get lastUseTime() {\n        const ret = wasm.__wbg_get_pickledsession_lastUseTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was last used.\n     * @param {Date} arg0\n     */\n    set lastUseTime(arg0) {\n        wasm.__wbg_set_pickledsession_lastUseTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PutDehydratedDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_putdehydrateddevicerequest_free(ptr >>> 0, 1));\n/**\n * A request that will upload a dehydrated device to the server.\n */\nexport class PutDehydratedDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PutDehydratedDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        PutDehydratedDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PutDehydratedDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_putdehydrateddevicerequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `PutDehydratedDeviceRequest`\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        PutDehydratedDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst QrFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qr_free(ptr >>> 0, 1));\n/**\n * QR code based verification.\n */\nexport class Qr {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Qr.prototype);\n        obj.__wbg_ptr = ptr;\n        QrFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qr_free(ptr, 0);\n    }\n    /**\n     * Get the current state of this request.\n     *\n     * Returns a `QrState`.\n     * @returns {QrState}\n     */\n    state() {\n        const ret = wasm.qr_state(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the QR verification been scanned by the other side.\n     *\n     * When the verification object is in this state it’s required\n     * that the user confirms that the other side has scanned the QR\n     * code.\n     * @returns {boolean}\n     */\n    hasBeenScanned() {\n        const ret = wasm.qr_hasBeenScanned(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the scanning of the QR code been confirmed by us?\n     * @returns {boolean}\n     */\n    hasBeenConfirmed() {\n        const ret = wasm.qr_hasBeenConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.qr_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other user that is participating in\n     * this verification flow.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.qr_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.qr_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.qr_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.qr_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification flow completed?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.qr_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.qr_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.qr_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we successfully scanned the QR code and are able to send\n     * a reciprocation event?\n     * @returns {boolean}\n     */\n    reciprocated() {\n        const ret = wasm.qr_reciprocated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the unique ID that identifies this QR verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qr_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room id if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.qr_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Generate a QR code object that is representing this\n     * verification flow.\n     *\n     * The QrCode can then be rendered as an image or as an unicode\n     * string.\n     *\n     * The `to_bytes` method can be used to instead output the raw\n     * bytes that should be encoded as a QR code.\n     *\n     * Returns a `QrCode`.\n     * @returns {QrCode}\n     */\n    toQrCode() {\n        const ret = wasm.qr_toQrCode(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCode.__wrap(ret[0]);\n    }\n    /**\n     * Generate a the raw bytes that should be encoded as a QR code\n     * is representing this verification flow.\n     *\n     * The `to_qr_code` method can be used to instead output a QrCode\n     * object that can be rendered.\n     * @returns {Uint8ClampedArray}\n     */\n    toBytes() {\n        const ret = wasm.qr_toBytes(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Notify the other side that we have successfully scanned the QR\n     * code and that the QR verification flow can start.\n     *\n     * This will return some OutgoingContent if the object is in the\n     * correct state to start the verification flow, otherwise None.\n     * @returns {any}\n     */\n    reciprocate() {\n        const ret = wasm.qr_reciprocate(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm that the other side has scanned our QR code.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already confirmed.\n     * @returns {any}\n     */\n    confirmScanning() {\n        const ret = wasm.qr_confirmScanning(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification flow.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.qr_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qr_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.qr_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst QrCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcode_free(ptr >>> 0, 1));\n/**\n * A QR code.\n */\nexport class QrCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCode.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcode_free(ptr, 0);\n    }\n    /**\n     * Render the QR code into a `Uint8ClampedArray` where 1 represents a\n     * dark pixel and 0 a white pixel.\n     * @returns {Uint8ClampedArray}\n     */\n    renderIntoBuffer() {\n        const ret = wasm.qrcode_renderIntoBuffer(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst QrCodeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodedata_free(ptr >>> 0, 1));\n/**\n * Data for the QR code login mechanism.\n *\n * The {@link QrCodeData} can be serialized and encoded as a QR code or it can\n * be decoded from a QR code.\n */\nexport class QrCodeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeData.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodedata_free(ptr, 0);\n    }\n    /**\n     * Create new {@link QrCodeData} from a given public key, a rendezvous URL\n     * and, optionally, a server name for the homeserver.\n     *\n     * If a server name is given, then the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Reciprocate}, i.e. the QR code will contain data for\n     * the existing device to display the QR code.\n     *\n     * If no server name is given, the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Login}, i.e. the QR code will contain data for the\n     * new device to display the QR code.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} rendezvous_url\n     * @param {string | undefined} [server_name]\n     */\n    constructor(public_key, rendezvous_url, server_name) {\n        _assertClass(public_key, Curve25519PublicKey);\n        var ptr0 = public_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(rendezvous_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(server_name) ? 0 : passStringToWasm0(server_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_new(ptr0, ptr1, len1, ptr2, len2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        QrCodeDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Attempt to decode a slice of bytes into a {@link QrCodeData} object.\n     *\n     * The slice of bytes would generally be returned by a QR code decoder.\n     * @param {Uint8Array} bytes\n     * @returns {QrCodeData}\n     */\n    static fromBytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBytes(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a list of bytes.\n     *\n     * The list of bytes can be used by a QR code generator to create an image\n     * containing a QR code.\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        const ret = wasm.qrcodedata_toBytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Attempt to decode a base64 encoded string into a {@link QrCodeData}\n     * object.\n     * @param {string} data\n     * @returns {QrCodeData}\n     */\n    static fromBase64(data) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a string using base64.\n     *\n     * This format can be used for debugging purposes and the\n     * [`QrcodeData::from_base64()`] method can be used to parse the string\n     * again.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the Curve25519 public key embedded in the {@link QrCodeData}.\n     *\n     * This Curve25519 public key should be used to establish an\n     * [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n     * (Elliptic Curve Integrated Encryption Scheme) channel with the other\n     * device.\n     * @returns {Curve25519PublicKey}\n     */\n    get publicKey() {\n        const ret = wasm.qrcodedata_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the URL of the rendezvous server which will be used to exchange\n     * messages between the two devices.\n     * @returns {string}\n     */\n    get rendezvousUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_rendezvousUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the server name of the homeserver which the new device will be\n     * logged in to.\n     *\n     * This will be only available if the existing device has generated the QR\n     * code and the new device is the one scanning the QR code.\n     * @returns {string | undefined}\n     */\n    get serverName() {\n        const ret = wasm.qrcodedata_serverName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the mode of this {@link QrCodeData} instance.\n     * @returns {QrCodeMode}\n     */\n    get mode() {\n        const ret = wasm.qrcodedata_mode(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst QrCodeScanFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodescan_free(ptr >>> 0, 1));\n/**\n * A scanned QR code.\n */\nexport class QrCodeScan {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeScan.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeScanFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeScanFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodescan_free(ptr, 0);\n    }\n    /**\n     * Parse the decoded payload of a QR code in byte slice form.\n     *\n     * This method is useful if you would like to do your own custom QR code\n     * decoding.\n     * @param {Uint8ClampedArray} buffer\n     * @returns {QrCodeScan}\n     */\n    static fromBytes(buffer) {\n        const ret = wasm.qrcodescan_fromBytes(buffer);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeScan.__wrap(ret[0]);\n    }\n}\n\nconst RehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A rehydrated device\n *\n * This device can receive to-device events to get room keys that were send to\n * it.\n */\nexport class RehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        RehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Receive the to-device events that sent to the dehydrated device\n     *\n     * The rehydrated device will decrypt the events and pass the room keys\n     * into the `OlmMachine`.\n     *\n     * `to_device_events` is a JSON-encoded result of the `events` array from\n     * `/dehydrated_device/{device_id}/events`.\n     *\n     * Returns an array of `RoomKeyInfo`, indicating the room keys that were\n     * received.\n     * @param {string} to_device_events\n     * @returns {Promise<Array<any>>}\n     */\n    receiveEvents(to_device_events) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rehydrateddevice_receiveEvents(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n}\n\nconst RoomIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomid_free(ptr >>> 0, 1));\n/**\n * A Matrix [room ID].\n *\n * [room ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class RoomId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomId.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RoomId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `RoomId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.roomid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        RoomIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the room ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyCountsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeycounts_free(ptr >>> 0, 1));\n/**\n * Struct holding the number of room keys we have.\n */\nexport class RoomKeyCounts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyCounts.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyCountsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyCountsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeycounts_free(ptr, 0);\n    }\n    /**\n     * The total number of room keys.\n     * @returns {number}\n     */\n    get total() {\n        const ret = wasm.__wbg_get_roomkeycounts_total(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The total number of room keys.\n     * @param {number} arg0\n     */\n    set total(arg0) {\n        wasm.__wbg_set_roomkeycounts_total(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The number of backed up room keys.\n     * @returns {number}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_roomkeycounts_backedUp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The number of backed up room keys.\n     * @param {number} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_roomkeycounts_backedUp(this.__wbg_ptr, arg0);\n    }\n}\n\nconst RoomKeyImportResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyimportresult_free(ptr >>> 0, 1));\n/**\n * The result of a call to {@link OlmMachine.importExportedRoomKeys} or\n * {@link OlmMachine.importBackedUpRoomKeys}.\n */\nexport class RoomKeyImportResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyImportResult.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyImportResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyImportResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyimportresult_free(ptr, 0);\n    }\n    /**\n     * The number of room keys that were imported.\n     * @returns {number}\n     */\n    get importedCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_importedCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The total number of room keys that were found in the export.\n     * @returns {number}\n     */\n    get totalCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_totalCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The keys that were imported.\n     *\n     * A Map from room id to a Map of the sender key to a Set of session ids.\n     *\n     * Typescript type: `Map<string, Map<string, Set<string>>`.\n     * @returns {Map<any, any>}\n     */\n    keys() {\n        const ret = wasm.roomkeyimportresult_keys(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomKeyInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyinfo_free(ptr >>> 0, 1));\n/**\n * Information on a room key that has been received or imported.\n */\nexport class RoomKeyInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyinfo_free(ptr, 0);\n    }\n    /**\n     * The {@link EncryptionAlgorithm} that this key is used for. Will be one\n     * of the `m.megolm.*` algorithms.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeyinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The room where the key is used.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeyinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device which initiated the session originally.\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.roomkeyinfo_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The ID of the session that the key is for.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeyinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyWithheldInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeywithheldinfo_free(ptr >>> 0, 1));\n/**\n * Information on a received `m.room_key.withheld` event.\n */\nexport class RoomKeyWithheldInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyWithheldInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyWithheldInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyWithheldInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeywithheldinfo_free(ptr, 0);\n    }\n    /**\n     * The User ID of the user that sent us the `m.room_key.withheld` message.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.roomkeywithheldinfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The encryption algorithm of the session that is being withheld.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeywithheldinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `code` from the `m.room_key.withheld` message, such as\n     * `m.unverified`.\n     * @returns {string}\n     */\n    get withheldCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_withheldCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The room ID of the session that is being withheld.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeywithheldinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The session ID of the session that is being withheld.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomMessageRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roommessagerequest_free(ptr >>> 0, 1));\n/**\n * A customized owned request type for sending out room messages\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n */\nexport class RoomMessageRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomMessageRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomMessageRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomMessageRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roommessagerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_roommessagerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the room to send the event to.\n     * @returns {string}\n     */\n    get room_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_room_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the transaction ID for this event.\n     *\n     * Clients should generate an ID unique across requests with the same\n     * access token; it will be used by the server to ensure idempotency of\n     * requests.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event to be sent.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_roommessagerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the message's content.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_roommessagerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `RoomMessageRequest`.\n     * @param {string} id\n     * @param {string} room_id\n     * @param {string} txn_id\n     * @param {string} event_type\n     * @param {string} content\n     */\n    constructor(id, room_id, txn_id, event_type, content) {\n        const ret = wasm.roommessagerequest_new(id, room_id, txn_id, event_type, content);\n        this.__wbg_ptr = ret >>> 0;\n        RoomMessageRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.roommessagerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomsettings_free(ptr >>> 0, 1));\n/**\n * Room encryption settings which are modified by state events or user options\n */\nexport class RoomSettings {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomSettings.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomSettingsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_roomsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_roomsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @returns {boolean}\n     */\n    get onlyAllowTrustedDevices() {\n        const ret = wasm.__wbg_get_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @param {boolean} arg0\n     */\n    set onlyAllowTrustedDevices(arg0) {\n        wasm.__wbg_set_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMs() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @param {number | undefined} [arg0]\n     */\n    set sessionRotationPeriodMs(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMessages() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @param {number | undefined} [arg0]\n     */\n    set sessionRotationPeriodMessages(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * Create a new `RoomSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.roomsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        RoomSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SasFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sas_free(ptr >>> 0, 1));\n/**\n * Short Authentication String (SAS) verification.\n */\nexport class Sas {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Sas.prototype);\n        obj.__wbg_ptr = ptr;\n        SasFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SasFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sas_free(ptr, 0);\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.sas_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get our own device ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.sas_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other side.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.sas_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.sas_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the unique ID that identifies this SAS verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.sas_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.sas_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Does this verification flow support displaying emoji for the\n     * short authentication string?\n     * @returns {boolean}\n     */\n    supportsEmoji() {\n        const ret = wasm.sas_supportsEmoji(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did this verification flow start from a verification request?\n     * @returns {boolean}\n     */\n    startedFromRequest() {\n        const ret = wasm.sas_startedFromRequest(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.sas_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we confirmed that the short auth string matches?\n     * @returns {boolean}\n     */\n    haveWeConfirmed() {\n        const ret = wasm.sas_haveWeConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification been accepted by both parties?\n     * @returns {boolean}\n     */\n    hasBeenAccepted() {\n        const ret = wasm.sas_hasBeenAccepted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.sas_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * True if we initiated the verification flow (ie, we sent the\n     * `m.key.verification.request`).\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.sas_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the SAS verification.\n     *\n     * This does nothing (and returns `undefined`) if the verification was\n     * already accepted, otherwise it returns an `OutgoingRequest`\n     * that needs to be sent out.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.sas_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm the SAS verification.\n     *\n     * This confirms that the short auth strings match on both sides.\n     *\n     * Does nothing if we’re not in a state where we can confirm the\n     * short auth string.\n     *\n     * Returns a `Promise` for an array of `OutgoingRequest`s.\n     * @returns {Promise<any>}\n     */\n    confirm() {\n        const ret = wasm.sas_confirm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Cancel the verification.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.sas_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.sas_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Has the SAS verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.sas_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Are we in a state where we can show the short auth string?\n     * @returns {boolean}\n     */\n    canBePresented() {\n        const ret = wasm.sas_canBePresented(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow done?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.sas_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.sas_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the emoji version of the short auth string.\n     *\n     * Returns `undefined` if we can't yet present the short auth string,\n     * otherwise an array of seven `Emoji` objects.\n     * @returns {(Emoji)[] | undefined}\n     */\n    emoji() {\n        const ret = wasm.sas_emoji(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the index of the emoji representing the short auth string\n     *\n     * Returns `undefined` if we can’t yet present the short auth\n     * string, otherwise seven `u8` numbers in the range from 0 to 63\n     * inclusive which can be converted to an emoji using [the\n     * relevant specification\n     * entry](https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji).\n     * @returns {Uint8Array | undefined}\n     */\n    emojiIndex() {\n        const ret = wasm.sas_emojiIndex(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the decimal version of the short auth string.\n     *\n     * Returns None if we can’t yet present the short auth string,\n     * otherwise a tuple containing three 4-digit integers that\n     * represent the short auth string.\n     * @returns {Uint16Array | undefined}\n     */\n    decimals() {\n        const ret = wasm.sas_decimals(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU16FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 2, 2);\n        }\n        return v1;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.sas_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst SecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretsbundle_free(ptr >>> 0, 1));\n/**\n * Struct containing the bundle of secrets to fully activate a new device for\n * end-to-end encryption.\n */\nexport class SecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretsbundle_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_masterKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_selfSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_userSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The bundle of the backup decryption key and backup version if any.\n     * @returns {BackupSecretsBundle | undefined}\n     */\n    get backupBundle() {\n        const ret = wasm.secretsbundle_backupBundle(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupSecretsBundle.__wrap(ret);\n    }\n    /**\n     * Serialize the [`SecretsBundle`] to a JSON object.\n     * @returns {any}\n     */\n    to_json() {\n        const ret = wasm.secretsbundle_to_json(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Deserialize the [`SecretsBundle`] from a JSON object.\n     * @param {any} json\n     * @returns {SecretsBundle}\n     */\n    static from_json(json) {\n        const ret = wasm.secretsbundle_from_json(json);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return SecretsBundle.__wrap(ret[0]);\n    }\n}\n\nconst ServerNameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_servername_free(ptr >>> 0, 1));\n/**\n * A Matrix-spec compliant [server name].\n *\n * It consists of a host and an optional port (separated by a colon if\n * present).\n *\n * [server name]: https://spec.matrix.org/v1.2/appendices/#server-name\n */\nexport class ServerName {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ServerName.prototype);\n        obj.__wbg_ptr = ptr;\n        ServerNameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ServerNameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_servername_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `ServerName`.\n     * @param {string} name\n     */\n    constructor(name) {\n        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.servername_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        ServerNameFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the host of the server name.\n     *\n     * That is: Return the part of the server before `:<port>` or the\n     * full server name if there is no port.\n     * @returns {string}\n     */\n    get host() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.servername_host(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the port of the server name if any.\n     * @returns {number | undefined}\n     */\n    get port() {\n        const ret = wasm.servername_port(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * Returns true if and only if the server name is an IPv4 or IPv6\n     * address.\n     * @returns {boolean}\n     */\n    isIpLiteral() {\n        const ret = wasm.servername_isIpLiteral(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ShieldStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shieldstate_free(ptr >>> 0, 1));\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n */\nexport class ShieldState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ShieldState.prototype);\n        obj.__wbg_ptr = ptr;\n        ShieldStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShieldStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shieldstate_free(ptr, 0);\n    }\n    /**\n     * The shield color\n     * @returns {ShieldColor}\n     */\n    get color() {\n        const ret = wasm.__wbg_get_shieldstate_color(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The shield color\n     * @param {ShieldColor} arg0\n     */\n    set color(arg0) {\n        wasm.__wbg_set_shieldstate_color(this.__wbg_ptr, arg0);\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @returns {ShieldStateCode | undefined}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_shieldstate_code(this.__wbg_ptr);\n        return ret === 6 ? undefined : ret;\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @param {ShieldStateCode | undefined} [arg0]\n     */\n    set code(arg0) {\n        wasm.__wbg_set_shieldstate_code(this.__wbg_ptr, isLikeNone(arg0) ? 6 : arg0);\n    }\n    /**\n     * Error message that can be displayed as a tooltip\n     * @returns {string | undefined}\n     */\n    get message() {\n        const ret = wasm.shieldstate_message(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n/**\n * Represents a potentially decoded signature (but not a validated\n * one).\n */\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n     * Get the Ed25519 signature, if this is one.\n     * @returns {Ed25519Signature | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.signature_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Convert the signature to a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SignatureUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureuploadrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/signatures/upload` API endpoint\n * ([specification]).\n *\n * Publishes cross-signing signatures for the user.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keyssignaturesupload\n */\nexport class SignatureUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * Some signature upload will have to an `id` field, some won't.\n     * They have one when they are created automatically during an interactive\n     * verification, otherwise they don't.\n     * @returns {string | undefined}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the payload of the request\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `SignatureUploadRequest`.\n     * @param {string} id\n     * @param {string} signed_keys\n     */\n    constructor(id, signed_keys) {\n        const ret = wasm.signatureuploadrequest_new(id, signed_keys);\n        this.__wbg_ptr = ret >>> 0;\n        SignatureUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.signatureuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SignatureVerificationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureverification_free(ptr >>> 0, 1));\n/**\n * The result of a signature verification of a signed JSON object.\n */\nexport class SignatureVerification {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureVerification.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureVerificationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureVerificationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureverification_free(ptr, 0);\n    }\n    /**\n     * Give the backup signature state from the current device.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get deviceState() {\n        const ret = wasm.signatureverification_deviceState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Give the backup signature state from the current user identity.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get userState() {\n        const ret = wasm.signatureverification_userState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the result considered to be trusted?\n     *\n     * This tells us if the result has a valid signature from any of the\n     * following:\n     *\n     * * Our own device\n     * * Our own user identity, provided the identity is trusted as well\n     * * Any of our own devices, provided the device is trusted as well\n     * @returns {boolean}\n     */\n    trusted() {\n        const ret = wasm.signatureverification_trusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignaturesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatures_free(ptr >>> 0, 1));\n/**\n * A collection of `Signature`.\n */\nexport class Signatures {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signatures.prototype);\n        obj.__wbg_ptr = ptr;\n        SignaturesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignaturesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatures_free(ptr, 0);\n    }\n    /**\n     * Creates a new, empty, signatures collection.\n     */\n    constructor() {\n        const ret = wasm.signatures_new();\n        this.__wbg_ptr = ret >>> 0;\n        SignaturesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Add the given signature from the given signer and the given key ID to\n     * the collection.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @param {Ed25519Signature} signature\n     * @returns {MaybeSignature | undefined}\n     */\n    addSignature(signer, key_id, signature) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.signatures_addSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr, signature.__wbg_ptr);\n        return ret === 0 ? undefined : MaybeSignature.__wrap(ret);\n    }\n    /**\n     * Try to find an Ed25519 signature from the given signer with\n     * the given key ID.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @returns {Ed25519Signature | undefined}\n     */\n    getSignature(signer, key_id) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        const ret = wasm.signatures_getSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Get the map of signatures that belong to the given user.\n     * @param {UserId} signer\n     * @returns {Map<any, any> | undefined}\n     */\n    get(signer) {\n        _assertClass(signer, UserId);\n        const ret = wasm.signatures_get(this.__wbg_ptr, signer.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Remove all the signatures we currently hold.\n     */\n    clear() {\n        wasm.signatures_clear(this.__wbg_ptr);\n    }\n    /**\n     * Do we hold any signatures or is our collection completely\n     * empty.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.signatures_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * How many signatures do we currently hold.\n     * @returns {number}\n     */\n    get count() {\n        const ret = wasm.signatures_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Get the json with all signatures\n     * @returns {string}\n     */\n    asJSON() {\n        const ret = wasm.signatures_asJSON(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst StoreHandleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storehandle_free(ptr >>> 0, 1));\n/**\n * A struct containing an open connection to a CryptoStore.\n *\n * Opening the CryptoStore can take some time, due to the PBKDF calculation\n * involved, so if multiple operations are being done on the same store, it is\n * more efficient to open it once.\n */\nexport class StoreHandle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoreHandle.prototype);\n        obj.__wbg_ptr = ptr;\n        StoreHandleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreHandleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storehandle_free(ptr, 0);\n    }\n    /**\n     * Open a crypto store.\n     *\n     * The created store will be based on IndexedDB if a `store_name` is\n     * provided; otherwise it will be based on a memory store and once the\n     * objects is dropped, the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `StoreHandle` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   store, for IndexedDB-based stores\n     * @param {string | undefined} [store_name]\n     * @param {string | undefined} [store_passphrase]\n     * @returns {Promise<StoreHandle>}\n     */\n    static open(store_name, store_passphrase) {\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_open(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Open a crypto store based on IndexedDB, using the given key for\n     * encryption.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database.\n     *\n     * * `store_key` - The key that should be used to encrypt the store, for\n     *   IndexedDB-based stores. Must be a 32-byte array.\n     * @param {string} store_name\n     * @param {Uint8Array} store_key\n     * @returns {Promise<StoreHandle>}\n     */\n    static openWithKey(store_name, store_key) {\n        const ptr0 = passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(store_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_openWithKey(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n}\n\nconst ToDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todevicerequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/sendToDevice` API endpoint\n * ([specification]).\n *\n * Send an event to a single device or to a group of devices.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3sendtodeviceeventtypetxnid\n */\nexport class ToDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todevicerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * For to-device request this would be the same value as `txn_id`. It is\n     * exposed also as `id` so that the js bindings are consistent with the\n     * other request types by using this field to mark as sent.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_todevicerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event being sent to each devices.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_todevicerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing a request identifier unique to the access token\n     * used to send the request.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_todevicerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `messages`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_todevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `ToDeviceRequest`.\n     * @param {string} id\n     * @param {string} event_type\n     * @param {string} txn_id\n     * @param {string} body\n     */\n    constructor(id, event_type, txn_id, body) {\n        const ret = wasm.todevicerequest_new(id, event_type, txn_id, body);\n        this.__wbg_ptr = ret >>> 0;\n        ToDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.todevicerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst TracingFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tracing_free(ptr >>> 0, 1));\n/**\n * Type to install and to manipulate the tracing layer.\n */\nexport class Tracing {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TracingFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tracing_free(ptr, 0);\n    }\n    /**\n     * Check whether the `tracing` feature has been enabled.\n     *\n     * @deprecated: `tracing` is now always enabled.\n     * @returns {boolean}\n     */\n    static isAvailable() {\n        const ret = wasm.tracing_isAvailable();\n        return ret !== 0;\n    }\n    /**\n     * Install the tracing layer.\n     * @param {LoggerLevel} min_level\n     */\n    constructor(min_level) {\n        const ret = wasm.tracing_new(min_level);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        TracingFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Re-define the minimum logger level.\n     * @param {LoggerLevel} min_level\n     */\n    set minLevel(min_level) {\n        const ret = wasm.tracing_set_minLevel(this.__wbg_ptr, min_level);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger on, i.e. it emits logs again if it was turned\n     * off.\n     */\n    turnOn() {\n        const ret = wasm.tracing_turnOn(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger off, i.e. it no longer emits logs.\n     */\n    turnOff() {\n        const ret = wasm.tracing_turnOff(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n}\n\nconst UploadSigningKeysRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_uploadsigningkeysrequest_free(ptr >>> 0, 1));\n/**\n * Other Requests *\n * Request that will publish a cross signing identity.\n *\n * This uploads the public cross signing key triplet.\n */\nexport class UploadSigningKeysRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UploadSigningKeysRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        UploadSigningKeysRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UploadSigningKeysRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_uploadsigningkeysrequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `master_key`,\n     * `self_signing_key`, `user_signing_key`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_uploadsigningkeysrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `UploadSigningKeysRequest`.\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.uploadsigningkeysrequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        UploadSigningKeysRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst UserDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userdevices_free(ptr >>> 0, 1));\n/**\n * A read only view over all devices belonging to a user.\n */\nexport class UserDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        UserDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userdevices_free(ptr, 0);\n    }\n    /**\n     * Get the specific device with the given device ID.\n     * @param {DeviceId} device_id\n     * @returns {Device | undefined}\n     */\n    get(device_id) {\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.userdevices_get(this.__wbg_ptr, device_id.__wbg_ptr);\n        return ret === 0 ? undefined : Device.__wrap(ret);\n    }\n    /**\n     * Returns true if there is at least one devices of this user\n     * that is considered to be verified, false otherwise.\n     *\n     * This won't consider your own device as verified, as your own\n     * device is always implicitly verified.\n     * @returns {boolean}\n     */\n    isAnyVerified() {\n        const ret = wasm.userdevices_isAnyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Array over all the device IDs of the user devices.\n     * @returns {Array<any>}\n     */\n    keys() {\n        const ret = wasm.userdevices_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Iterator over all the devices of the user devices.\n     * @returns {Array<any>}\n     */\n    devices() {\n        const ret = wasm.userdevices_devices(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UserIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userid_free(ptr >>> 0, 1));\n/**\n * A Matrix [user ID].\n *\n * [user ID]: https://spec.matrix.org/v1.2/appendices/#user-identifiers\n */\nexport class UserId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserId.prototype);\n        obj.__wbg_ptr = ptr;\n        UserIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof UserId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `UserId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.userid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        UserIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the user's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the user ID.\n     * @returns {ServerName}\n     */\n    get serverName() {\n        const ret = wasm.userid_serverName(this.__wbg_ptr);\n        return ServerName.__wrap(ret);\n    }\n    /**\n     * Whether this user ID is a historical one.\n     *\n     * A historical user ID is one that doesn't conform to the latest\n     * specification of the user ID grammar but is still accepted\n     * because it was previously allowed.\n     * @returns {boolean}\n     */\n    isHistorical() {\n        const ret = wasm.userid_isHistorical(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Return the user ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Create a clone of this `UserId`.\n     *\n     * This can be useful when passing a `UserId` instance to methods such as\n     * {@link OlmMachine.updateTrackedUsers} which destroy the instance.\n     * @returns {UserId}\n     */\n    clone() {\n        const ret = wasm.userid_clone(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n}\n\nconst VerificationRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationrequest_free(ptr >>> 0, 1));\n/**\n * An object controlling key verification requests.\n *\n * Interactive verification flows usually start with a verification\n * request, this object lets you send and reply to such a\n * verification request.\n *\n * After the initial handshake the verification flow transitions into\n * one of the verification methods.\n */\nexport class VerificationRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationrequest_free(ptr, 0);\n    }\n    /**\n     * Create an event content that can be sent as a room event to\n     * request verification from the other side. This should be used\n     * only for verifications of other users and it should be sent to\n     * a room we consider to be a DM with the other user.\n     * @param {UserId} own_user_id\n     * @param {DeviceId} own_device_id\n     * @param {UserId} other_user_id\n     * @param {any[] | undefined} [methods]\n     * @returns {string}\n     */\n    static request(own_user_id, own_device_id, other_user_id, methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            _assertClass(own_user_id, UserId);\n            _assertClass(own_device_id, DeviceId);\n            _assertClass(other_user_id, UserId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.verificationrequest_request(own_user_id.__wbg_ptr, own_device_id.__wbg_ptr, other_user_id.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Our own user id.\n     * @returns {UserId}\n     */\n    get ownUserId() {\n        const ret = wasm.verificationrequest_ownUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other user that is participating in this\n     * verification request.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.verificationrequest_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other device that is participating in this\n     * verification.\n     * @returns {DeviceId | undefined}\n     */\n    get otherDeviceId() {\n        const ret = wasm.verificationrequest_otherDeviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.verificationrequest_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Get info about the cancellation if the verification request\n     * has been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    get cancelInfo() {\n        const ret = wasm.verificationrequest_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification request been answered by another device?\n     * @returns {boolean}\n     */\n    isPassive() {\n        const ret = wasm.verificationrequest_isPassive(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the verification request ready to start a verification flow?\n     * @returns {boolean}\n     */\n    isReady() {\n        const ret = wasm.verificationrequest_isReady(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.verificationrequest_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The number of milliseconds remaining before this verification flow times\n     * out.\n     *\n     * Returns zero if the time has already passed.\n     * @returns {number}\n     */\n    timeRemainingMillis() {\n        const ret = wasm.verificationrequest_timeRemainingMillis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the supported verification methods of the other side.\n     *\n     * Will be present only if the other side requested the\n     * verification or if we’re in the ready state.\n     *\n     * # Returns\n     *\n     * `undefined` if we do not yet know the supported methods; otherwise, an\n     * array of `VerificationMethod`s.\n     * @returns {any[] | undefined}\n     */\n    get theirSupportedMethods() {\n        const ret = wasm.verificationrequest_theirSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get our own supported verification methods that we advertised.\n     *\n     * Will be present only we requested the verification or if we’re\n     * in the ready state.\n     * @returns {any[] | undefined}\n     */\n    get ourSupportedMethods() {\n        const ret = wasm.verificationrequest_ourSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the unique ID of this verification request.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.verificationrequest_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.verificationrequest_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.verificationrequest_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * finished?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.verificationrequest_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the current phase of this request.\n     *\n     * Returns a `VerificationRequestPhase`.\n     * @returns {VerificationRequestPhase}\n     */\n    phase() {\n        const ret = wasm.verificationrequest_phase(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * If this request has transitioned into a concrete verification\n     * flow (and not yet been completed or cancelled), returns a `Verification`\n     * object.\n     *\n     * Returns: a `Sas`, a `Qr`, or `undefined`.\n     * @returns {any}\n     */\n    getVerification() {\n        const ret = wasm.verificationrequest_getVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.verificationrequest_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.verificationrequest_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the verification request signaling that our client\n     * supports the given verification methods.\n     *\n     * `methods` represents the methods that we should advertise as\n     * supported by us.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @param {any[]} methods\n     * @returns {any}\n     */\n    acceptWithMethods(methods) {\n        const ptr0 = passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.verificationrequest_acceptWithMethods(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Accept the verification request.\n     *\n     * This method will accept the request and signal that it\n     * supports the `m.sas.v1`, the `m.qr_code.show.v1`, and\n     * `m.reciprocate.v1` method.\n     *\n     * `m.qr_code.show.v1` will only be signaled if the `qrcode`\n     * feature is enabled. This feature is disabled by default. If\n     * it's enabled and QR code scanning should be supported or QR\n     * code showing shouldn't be supported the `accept_with_methods`\n     * method should be used instead.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.verificationrequest_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification request.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.verificationrequest_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Transition from this verification request into a SAS verification flow.\n     *\n     * Returns `Promise<[Sas, RoomMessageRequest|ToDeviceRequest] | undefined>`\n     * @returns {Promise<any>}\n     */\n    startSas() {\n        const ret = wasm.verificationrequest_startSas(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate a QR code that can be used by another client to start\n     * a QR code based verification.\n     *\n     * Returns a `Qr` or `undefined`.\n     * @returns {Promise<any>}\n     */\n    generateQrCode() {\n        const ret = wasm.verificationrequest_generateQrCode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Start a QR code verification by providing a scanned QR code\n     * for this verification flow.\n     * @param {QrCodeScan} data\n     * @returns {Promise<any>}\n     */\n    scanQrCode(data) {\n        _assertClass(data, QrCodeScan);\n        const ret = wasm.verificationrequest_scanQrCode(this.__wbg_ptr, data.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst VersionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_versions_free(ptr >>> 0, 1));\n/**\n * Object containing the versions of the Rust libraries we are using.\n */\nexport class Versions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Versions.prototype);\n        obj.__wbg_ptr = ptr;\n        VersionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VersionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_versions_free(ptr, 0);\n    }\n    /**\n     * The version of the vodozemac crate.\n     * @returns {string}\n     */\n    get vodozemac() {\n        const ret = wasm.__wbg_get_versions_vodozemac(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The version of the matrix-sdk-crypto crate.\n     * @returns {string}\n     */\n    get matrix_sdk_crypto() {\n        const ret = wasm.__wbg_get_versions_matrix_sdk_crypto(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The Git commit hash of the crate's source tree at build time.\n     * @returns {string}\n     */\n    get git_sha() {\n        const ret = wasm.__wbg_get_versions_git_sha(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The build-time output of the `git describe` command of the source tree\n     * of crate.\n     * @returns {string}\n     */\n    get git_description() {\n        const ret = wasm.__wbg_get_versions_git_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nexport function __wbg_String_8f0eb39a4a4c2f66(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_String_eecc4a11987127d6(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_Window_b0044ac7db258535(arg0) {\n    const ret = arg0.Window;\n    return ret;\n};\n\nexport function __wbg_WorkerGlobalScope_b74cefefc62a37da(arg0) {\n    const ret = arg0.WorkerGlobalScope;\n    return ret;\n};\n\nexport function __wbg_add_0d9e99fb9c2d2cc5(arg0, arg1) {\n    const ret = arg0.add(arg1);\n    return ret;\n};\n\nexport function __wbg_add_c836e3d4b14cd062() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.add(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_at_479807bfddde3a33(arg0, arg1) {\n    const ret = arg0.at(arg1);\n    return ret;\n};\n\nexport function __wbg_backupkeys_new(arg0) {\n    const ret = BackupKeys.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_bound_1918c0826c5b9363() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = IDBKeyRange.bound(arg0, arg1, arg2 !== 0, arg3 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_bound_324dfb8899c9798c() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.bound(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_buffer_61b7ce01341d7f88(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nexport function __wbg_call_3b770f0d6eb4720e() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.call(arg1, arg2, arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_500db948e69c7330() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.call(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_9bd6f269d4835e33() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.call(arg1, arg2, arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_b0d8e36992d9900d() { return handleError(function (arg0, arg1) {\n    const ret = arg0.call(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_clearTimeout_5a54f8841c30079a(arg0) {\n    const ret = clearTimeout(arg0);\n    return ret;\n};\n\nexport function __wbg_clear_da83758e0bea0eb6() { return handleError(function (arg0) {\n    const ret = arg0.clear();\n    return ret;\n}, arguments) };\n\nexport function __wbg_close_f6e618ed8b0326a3(arg0) {\n    arg0.close();\n};\n\nexport function __wbg_code_71136b86e2aa7f41(arg0) {\n    const ret = arg0.code;\n    return ret;\n};\n\nexport function __wbg_continue_bd44561c014cacea() { return handleError(function (arg0) {\n    arg0.continue();\n}, arguments) };\n\nexport function __wbg_count_244aa4118e005b59() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_count_4df50ef6c1ddd770() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_14571b3c4eec1628() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_1d4b2bbb6b21b8f8() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createObjectStore_b6f14aa10f83a300() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.createObjectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_crosssigningbootstraprequests_new(arg0) {\n    const ret = CrossSigningBootstrapRequests.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningkeyexport_new(arg0) {\n    const ret = CrossSigningKeyExport.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningstatus_new(arg0) {\n    const ret = CrossSigningStatus.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crypto_ed58b8e10a292839(arg0) {\n    const ret = arg0.crypto;\n    return ret;\n};\n\nexport function __wbg_debug_156ca727dbc3150f(arg0) {\n    console.debug(arg0);\n};\n\nexport function __wbg_debug_3acd668e6e6c6087(arg0, arg1) {\n    arg0.debug(arg1);\n};\n\nexport function __wbg_decryptedroomevent_new(arg0) {\n    const ret = DecryptedRoomEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevice_new(arg0) {\n    const ret = DehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevicekey_new(arg0) {\n    const ret = DehydratedDeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deleteObjectStore_1f50ba0263875deb() { return handleError(function (arg0, arg1, arg2) {\n    arg0.deleteObjectStore(getStringFromWasm0(arg1, arg2));\n}, arguments) };\n\nexport function __wbg_delete_5c33e4966f59624d() { return handleError(function (arg0, arg1) {\n    const ret = arg0.delete(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_delete_d97b2b4ff716c553() { return handleError(function (arg0) {\n    const ret = arg0.delete();\n    return ret;\n}, arguments) };\n\nexport function __wbg_device_new(arg0) {\n    const ret = Device.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deviceid_new(arg0) {\n    const ret = DeviceId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekey_new(arg0) {\n    const ret = DeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekeyid_new(arg0) {\n    const ret = DeviceKeyId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_done_f22c1561fa919baa(arg0) {\n    const ret = arg0.done;\n    return ret;\n};\n\nexport function __wbg_emoji_new(arg0) {\n    const ret = Emoji.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_encryptioninfo_new(arg0) {\n    const ret = EncryptionInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_4f2bb9b0d701c0f6(arg0) {\n    const ret = Object.entries(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_82bf0e755ef54a5f(arg0) {\n    const ret = arg0.entries();\n    return ret;\n};\n\nexport function __wbg_error_32fda676ae978f6e(arg0, arg1) {\n    arg0.error(arg1);\n};\n\nexport function __wbg_error_7534b8e9a36f1ab4(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbg_error_77233c625ed0c533() { return handleError(function (arg0) {\n    const ret = arg0.error;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_error_fab41a42d22bf2bc(arg0) {\n    console.error(arg0);\n};\n\nexport function __wbg_from_d68eaa96dba25449(arg0) {\n    const ret = Array.from(arg0);\n    return ret;\n};\n\nexport function __wbg_getAllKeys_ad97dc28822a6891() { return handleError(function (arg0) {\n    const ret = arg0.getAllKeys();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_72e2faaa06d1a8cf() { return handleError(function (arg0) {\n    const ret = arg0.getAll();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_8f38031e5969c7f5() { return handleError(function (arg0, arg1) {\n    const ret = arg0.getAll(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_8fa84589faccab36() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.getAll(arg1, arg2 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getRandomValues_bcb4912f16000dc4() { return handleError(function (arg0, arg1) {\n    arg0.getRandomValues(arg1);\n}, arguments) };\n\nexport function __wbg_getTime_ab8b72009983c537(arg0) {\n    const ret = arg0.getTime();\n    return ret;\n};\n\nexport function __wbg_get_6a4f854f5cca7403() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_7081edc0440983a5() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_9aa3dff3f0266054(arg0, arg1) {\n    const ret = arg0[arg1 >>> 0];\n    return ret;\n};\n\nexport function __wbg_get_bbccf8970793c087() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getwithrefkey_1dc361bd10053bfe(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_6550b2c093d2eb18(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_global_b6f5c73312f62313(arg0) {\n    const ret = arg0.global;\n    return ret;\n};\n\nexport function __wbg_inboundgroupsession_new(arg0) {\n    const ret = InboundGroupSession.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_index_871d874253bae760() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.index(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_indexedDB_601ec26c63e333de() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_72e2ca071222fd9e() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_e34a5e9b3d2fcfa1() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_info_c3044c86ae29faab(arg0) {\n    console.info(arg0);\n};\n\nexport function __wbg_info_ed71056bef15b91a(arg0, arg1) {\n    arg0.info(arg1);\n};\n\nexport function __wbg_instanceof_ArrayBuffer_670ddde44cdb2602(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Map_98ecb30afec5acdb(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Map;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Promise_0aa3a90cfe6672c9(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Promise;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Uint8Array_28af5bc19d6acad8(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_isArray_1ba11a930108ec51(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_12f5549b2fca23f4(arg0) {\n    const ret = Number.isSafeInteger(arg0);\n    return ret;\n};\n\nexport function __wbg_item_7156a8ffa4d816bc(arg0, arg1, arg2) {\n    const ret = arg1.item(arg2 >>> 0);\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_iterator_23604bb983791576() {\n    const ret = Symbol.iterator;\n    return ret;\n};\n\nexport function __wbg_key_87db8226759da642() { return handleError(function (arg0) {\n    const ret = arg0.key;\n    return ret;\n}, arguments) };\n\nexport function __wbg_keysbackuprequest_new(arg0) {\n    const ret = KeysBackupRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysclaimrequest_new(arg0) {\n    const ret = KeysClaimRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysqueryrequest_new(arg0) {\n    const ret = KeysQueryRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysuploadrequest_new(arg0) {\n    const ret = KeysUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_length_65d1cd11729ced11(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_d65cf0786bfc5739(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_f4d79409aa324811(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_lowerBound_3aa47caa33c7e1e6() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.lowerBound(arg0, arg1 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_maybesignature_new(arg0) {\n    const ret = MaybeSignature.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_megolmdecryptionerror_new(arg0) {\n    const ret = MegolmDecryptionError.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_message_d19bdb65f0a41cf5(arg0, arg1) {\n    const ret = arg1.message;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_msCrypto_0a36e2ec3a343d26(arg0) {\n    const ret = arg0.msCrypto;\n    return ret;\n};\n\nexport function __wbg_name_8862cd49ad807c59(arg0, arg1) {\n    const ret = arg1.name;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_new_0f1bd659dcd47068(arg0) {\n    const ret = new Set(arg0);\n    return ret;\n};\n\nexport function __wbg_new_254fa9eac11932ae() {\n    const ret = new Array();\n    return ret;\n};\n\nexport function __wbg_new_3d446df9155128ef(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_758(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return ret;\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_3ff5b33b1ce712df(arg0) {\n    const ret = new Uint8Array(arg0);\n    return ret;\n};\n\nexport function __wbg_new_41257536af60ed14(arg0) {\n    const ret = new Date(arg0);\n    return ret;\n};\n\nexport function __wbg_new_688846f374351c92() {\n    const ret = new Object();\n    return ret;\n};\n\nexport function __wbg_new_8a6f238a6ece86ea() {\n    const ret = new Error();\n    return ret;\n};\n\nexport function __wbg_new_9451f3dcb42e0e37(arg0) {\n    const ret = new Uint8ClampedArray(arg0);\n    return ret;\n};\n\nexport function __wbg_new_bc96c6a1c0786643() {\n    const ret = new Map();\n    return ret;\n};\n\nexport function __wbg_newnoargs_fd9e4bf8be2bc16d(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_ba35896968751d91(arg0, arg1, arg2) {\n    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_c0c90653f73c7dfb(arg0, arg1, arg2) {\n    const ret = new Uint8ClampedArray(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_2aede0ef4e6e97ec(arg0) {\n    const ret = new Uint8ClampedArray(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_34ce8f1051e74449(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithmessage_80e6436058862fd4() { return handleError(function (arg0, arg1) {\n    const ret = new DOMException(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_next_01dd9234a5bf6d05() { return handleError(function (arg0) {\n    const ret = arg0.next();\n    return ret;\n}, arguments) };\n\nexport function __wbg_next_137428deb98342b0(arg0) {\n    const ret = arg0.next;\n    return ret;\n};\n\nexport function __wbg_node_02999533c4ea02e3(arg0) {\n    const ret = arg0.node;\n    return ret;\n};\n\nexport function __wbg_now_2c95c9de01293173(arg0) {\n    const ret = arg0.now();\n    return ret;\n};\n\nexport function __wbg_now_64d0bb151e5d3889() {\n    const ret = Date.now();\n    return ret;\n};\n\nexport function __wbg_objectStoreNames_cb00c8113b3cf5df(arg0) {\n    const ret = arg0.objectStoreNames;\n    return ret;\n};\n\nexport function __wbg_objectStore_cdbc73ee600a2cfa() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.objectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_oldVersion_a31d9f8577239dd8(arg0) {\n    const ret = arg0.oldVersion;\n    return ret;\n};\n\nexport function __wbg_olmmachine_new(arg0) {\n    const ret = OlmMachine.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_openCursor_37e21d9af1a61159() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_da08cc74542711ad() { return handleError(function (arg0, arg1) {\n    const ret = arg0.openCursor(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_e7a3f6453a0f6725() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_4588c85c0c43671d() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_5c51d4d6d7ab6da6() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_otheruseridentity_new(arg0) {\n    const ret = OtherUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_ownuseridentity_new(arg0) {\n    const ret = OwnUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_parse_161c68378e086ae1() { return handleError(function (arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_performance_7a3ffd0b17f663ad(arg0) {\n    const ret = arg0.performance;\n    return ret;\n};\n\nexport function __wbg_pickledinboundgroupsession_unwrap(arg0) {\n    const ret = PickledInboundGroupSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_pickledsession_unwrap(arg0) {\n    const ret = PickledSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_process_5c1d670bc53614b8(arg0) {\n    const ret = arg0.process;\n    return ret;\n};\n\nexport function __wbg_push_6edad0df4b546b2c(arg0, arg1) {\n    const ret = arg0.push(arg1);\n    return ret;\n};\n\nexport function __wbg_put_5393e88dbe742e8f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.put(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_putdehydrateddevicerequest_new(arg0) {\n    const ret = PutDehydratedDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_qr_new(arg0) {\n    const ret = Qr.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_queueMicrotask_2181040e064c0dc8(arg0) {\n    queueMicrotask(arg0);\n};\n\nexport function __wbg_queueMicrotask_ef9ac43769cbcc4f(arg0) {\n    const ret = arg0.queueMicrotask;\n    return ret;\n};\n\nexport function __wbg_randomFillSync_ab2cfe79ebbf2740() { return handleError(function (arg0, arg1) {\n    arg0.randomFillSync(arg1);\n}, arguments) };\n\nexport function __wbg_readyState_8428fa7c5e093401(arg0) {\n    const ret = arg0.readyState;\n    return (__wbindgen_enum_IdbRequestReadyState.indexOf(ret) + 1 || 3) - 1;\n};\n\nexport function __wbg_rehydrateddevice_new(arg0) {\n    const ret = RehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_require_79b1e9274cde3c87() { return handleError(function () {\n    const ret = module.require;\n    return ret;\n}, arguments) };\n\nexport function __wbg_resolve_0bf7c44d641804f9(arg0) {\n    const ret = Promise.resolve(arg0);\n    return ret;\n};\n\nexport function __wbg_result_e6ba6a347dcb7470() { return handleError(function (arg0) {\n    const ret = arg0.result;\n    return ret;\n}, arguments) };\n\nexport function __wbg_roomid_unwrap(arg0) {\n    const ret = RoomId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeycounts_new(arg0) {\n    const ret = RoomKeyCounts.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyimportresult_new(arg0) {\n    const ret = RoomKeyImportResult.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyinfo_new(arg0) {\n    const ret = RoomKeyInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeywithheldinfo_new(arg0) {\n    const ret = RoomKeyWithheldInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roommessagerequest_new(arg0) {\n    const ret = RoomMessageRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomsettings_new(arg0) {\n    const ret = RoomSettings.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_sas_new(arg0) {\n    const ret = Sas.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_secretsbundle_new(arg0) {\n    const ret = SecretsBundle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_setTimeout_db2dbaeefb6f39c7() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_set_1d80752d0d5f0b21(arg0, arg1, arg2) {\n    arg0[arg1 >>> 0] = arg2;\n};\n\nexport function __wbg_set_23d69db4e5c66a6e(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_3807d5f0bfc24aa7(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_3f1d0b984ed272ed(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_76818dc3c59a63d5(arg0, arg1, arg2) {\n    const ret = arg0.set(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_set_9592f7d5b752cae3(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_setonabort_ade6cac5c35a572f(arg0, arg1) {\n    arg0.onabort = arg1;\n};\n\nexport function __wbg_setonblocked_d13048be9383f4dc(arg0, arg1) {\n    arg0.onblocked = arg1;\n};\n\nexport function __wbg_setoncomplete_2747fb71ae0af4a8(arg0, arg1) {\n    arg0.oncomplete = arg1;\n};\n\nexport function __wbg_setonerror_72b33e31f9edb045(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonerror_e4beb2652cf66635(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonsuccess_57167b1c2650357c(arg0, arg1) {\n    arg0.onsuccess = arg1;\n};\n\nexport function __wbg_setonupgradeneeded_887c7a5fca66011e(arg0, arg1) {\n    arg0.onupgradeneeded = arg1;\n};\n\nexport function __wbg_setonversionchange_a6f60bd1d110795d(arg0, arg1) {\n    arg0.onversionchange = arg1;\n};\n\nexport function __wbg_setunique_cfc477dc5825e1c4(arg0, arg1) {\n    arg0.unique = arg1 !== 0;\n};\n\nexport function __wbg_signatures_new(arg0) {\n    const ret = Signatures.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureuploadrequest_new(arg0) {\n    const ret = SignatureUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureverification_new(arg0) {\n    const ret = SignatureVerification.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stack_0ed75d68575b0f3c(arg0, arg1) {\n    const ret = arg1.stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_static_accessor_GLOBAL_0be7472e492ad3e3() {\n    const ret = typeof global === 'undefined' ? null : global;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_GLOBAL_THIS_1a6eb482d12c9bfb() {\n    const ret = typeof globalThis === 'undefined' ? null : globalThis;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_SELF_1dc398a895c82351() {\n    const ret = typeof self === 'undefined' ? null : self;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_WINDOW_ae1c80c7eea8d64a() {\n    const ret = typeof window === 'undefined' ? null : window;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_storehandle_new(arg0) {\n    const ret = StoreHandle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stringify_f4f701bc34ceda61() { return handleError(function (arg0) {\n    const ret = JSON.stringify(arg0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_subarray_46adeb9b86949d12(arg0, arg1, arg2) {\n    const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_target_a8fe593e7ee79c21(arg0) {\n    const ret = arg0.target;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_then_0438fad860fe38e1(arg0, arg1) {\n    const ret = arg0.then(arg1);\n    return ret;\n};\n\nexport function __wbg_then_0ffafeddf0e182a4(arg0, arg1, arg2) {\n    const ret = arg0.then(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_todevicerequest_new(arg0) {\n    const ret = ToDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_transaction_bc71c2aaaf467420() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.transaction(getStringFromWasm0(arg1, arg2), __wbindgen_enum_IdbTransactionMode[arg3]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_d2b6d520837fbe7f(arg0) {\n    const ret = arg0.transaction;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_transaction_dbab9cd9ea849958() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.transaction(arg1, __wbindgen_enum_IdbTransactionMode[arg2]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_update_211ddccaf2cec6ee() { return handleError(function (arg0, arg1) {\n    const ret = arg0.update(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_userdevices_new(arg0) {\n    const ret = UserDevices.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_new(arg0) {\n    const ret = UserId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_unwrap(arg0) {\n    const ret = UserId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_value_0ad6f37677c8ee74() { return handleError(function (arg0) {\n    const ret = arg0.value;\n    return ret;\n}, arguments) };\n\nexport function __wbg_value_4c32fd138a88eee2(arg0) {\n    const ret = arg0.value;\n    return ret;\n};\n\nexport function __wbg_values_7aa03dd078978c86(arg0) {\n    const ret = arg0.values();\n    return ret;\n};\n\nexport function __wbg_verificationrequest_new(arg0) {\n    const ret = VerificationRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_version_2b650c9d4f0a2438(arg0) {\n    const ret = arg0.version;\n    return ret;\n};\n\nexport function __wbg_versions_c71aa1626a93e0a1(arg0) {\n    const ret = arg0.versions;\n    return ret;\n};\n\nexport function __wbg_warn_123db6aa8948382e(arg0) {\n    console.warn(arg0);\n};\n\nexport function __wbg_warn_9d038df1589cb1bd(arg0, arg1) {\n    arg0.warn(arg1);\n};\n\nexport function __wbindgen_as_number(arg0) {\n    const ret = +arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return ret;\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = arg1;\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = arg0;\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = arg0.original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper1050(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 30, __wbg_adapter_58);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper2213(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 410, __wbg_adapter_61);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper5386(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 410, __wbg_adapter_64);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper6843(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 416, __wbg_adapter_67);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper6848(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 416, __wbg_adapter_70);\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = arg0 in arg1;\n    return ret;\n};\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_4;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nexport function __wbindgen_is_array(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(arg0) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(arg0) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_is_null(arg0) {\n    const ret = arg0 === null;\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = arg0;\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(arg0) === 'string';\n    return ret;\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = arg0 === undefined;\n    return ret;\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = arg0 === arg1;\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = arg0 == arg1;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_try_into_number(arg0) {\n    let result;\n    try { result = +arg0 } catch (e) { result = e }\n    const ret = result;\n    return ret;\n};\n\n"],"names":["Proxy","get","Error","modPromise","async","initAsync","wasm","__wbindgen_start","loadModuleAsync","__wbg_set_wasm","val","WASM_VECTOR_LEN","cachedUint8ArrayMemory0","getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","cachedTextEncoder","TextEncoder","module","require","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","ptr","subarray","len","mem","offset","code","charCodeAt","slice","cachedDataViewMemory0","getDataViewMemory0","detached","DataView","addToExternrefTable0","obj","idx","__externref_table_alloc","__wbindgen_export_4","handleError","f","args","apply","this","e","__wbindgen_exn_store","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm0","decode","isLikeNone","x","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_6","dtor","a","b","makeMutClosure","arg0","arg1","cnt","real","original","makeClosure","debugString","type","description","name","Array","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","passArray8ToWasm0","takeFromExternrefTable0","value","__externref_table_dealloc","_assertClass","instance","klass","getArrayU8FromWasm0","passArrayJsValueToWasm0","array","setUint32","getArrayJsValueFromWasm0","result","push","getUint32","__externref_drop_slice","cachedUint16ArrayMemory0","getArrayU16FromWasm0","Uint16Array","getVersions","ret","Versions","__wrap","__wbg_adapter_58","arg2","closure29_externref_shim_multivalue_shim","__wbg_adapter_61","_dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__heca5c4426cc7e703","__wbg_adapter_64","closure735_externref_shim","__wbg_adapter_67","closure415_externref_shim","__wbg_adapter_70","_dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h41d552962a79dfb4","DecryptionErrorCode","Object","freeze","MissingRoomKey","UnknownMessageIndex","MismatchedIdentityKeys","UnknownSenderDevice","UnsignedSenderDevice","SenderIdentityVerificationViolation","UnableToDecrypt","EncryptionAlgorithm","Ed25519","Curve25519","Unknown","OlmV1Curve25519AesSha2","MegolmV1AesSha2","HistoryVisibility","Invited","Joined","Shared","WorldReadable","LocalTrust","Verified","BlackListed","Ignored","Unset","LoggerLevel","Trace","Debug","Info","Warn","QrCodeMode","Login","Reciprocate","QrState","Created","Scanned","Confirmed","Reciprocated","Done","Cancelled","ShieldColor","KeysUpload","KeysQuery","KeysClaim","ToDevice","SignatureUpload","RoomMessage","KeysBackup","Red","Grey","None","ShieldStateCode","AuthenticityNotGuaranteed","UnknownDevice","UnsignedDevice","UnverifiedIdentity","SentInClear","VerificationViolation","TrustRequirement","Missing","Invalid","ValidButNotTrusted","ValidAndTrusted","Untrusted","CrossSignedOrLegacy","CrossSigned","VerificationMethod","SasV1","QrCodeScanV1","QrCodeShowV1","ReciprocateV1","VerificationRequestPhase","Requested","Ready","Transitioned","__wbindgen_enum_IdbRequestReadyState","__wbindgen_enum_IdbTransactionMode","__wbg_attachment_free","BackupDecryptionKeyFinalization","__wbg_backupdecryptionkey_free","BackupDecryptionKey","create","prototype","__wbg_ptr","__destroy_into_raw","free","createRandomKey","backupdecryptionkey_createRandomKey","fromBase64","key","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","backupdecryptionkey_fromBase64","toBase64","backupdecryptionkey_toBase64","megolmV1PublicKey","backupdecryptionkey_megolmV1PublicKey","MegolmV1BackupKey","decryptV1","ephemeral_key","mac","ciphertext","deferred5_0","deferred5_1","ptr1","len1","ptr2","len2","backupdecryptionkey_decryptV1","ptr4","len4","__wbindgen_free","BackupKeysFinalization","__wbg_backupkeys_free","BackupKeys","decryptionKey","__wbg_get_backupkeys_decryptionKey","__wbg_set_backupkeys_decryptionKey","backupVersion","__wbg_get_backupkeys_backupVersion","v1","__wbg_set_backupkeys_backupVersion","decryptionKeyBase64","backupkeys_decryptionKeyBase64","BackupSecretsBundleFinalization","__wbg_backupsecretsbundle_free","BackupSecretsBundle","deferred1_0","deferred1_1","__wbg_get_backupsecretsbundle_key","__wbg_set_backupsecretsbundle_key","backup_version","__wbg_get_backupsecretsbundle_backup_version","__wbg_set_backupsecretsbundle_backup_version","BaseMigrationDataFinalization","__wbg_basemigrationdata_free","BaseMigrationData","userId","__wbg_get_basemigrationdata_userId","UserId","__wbg_set_basemigrationdata_userId","deviceId","__wbg_get_basemigrationdata_deviceId","DeviceId","__wbg_set_basemigrationdata_deviceId","pickledAccount","__wbg_get_basemigrationdata_pickledAccount","__wbg_get_basemigrationdata_backupVersion","__wbg_set_basemigrationdata_backupVersion","backupRecoveryKey","__wbg_get_basemigrationdata_backupRecoveryKey","__wbg_set_basemigrationdata_backupRecoveryKey","privateCrossSigningMasterKey","__wbg_get_basemigrationdata_privateCrossSigningMasterKey","__wbg_set_basemigrationdata_privateCrossSigningMasterKey","privateCrossSigningSelfSigningKey","__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey","__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey","privateCrossSigningUserSigningKey","__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey","__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey","constructor","basemigrationdata_new","CancelInfoFinalization","__wbg_cancelinfo_free","CancelInfo","reason","cancelinfo_reason","cancelCode","cancelinfo_cancelCode","cancelledbyUs","cancelinfo_cancelledbyUs","CheckCodeFinalization","__wbg_checkcode_free","CheckCode","as_bytes","checkcode_as_bytes","to_digit","checkcode_to_digit","CollectStrategyFinalization","__wbg_collectstrategy_free","CollectStrategy","eq","other","collectstrategy_eq","deviceBasedStrategy","only_allow_trusted_devices","error_on_verified_user_problem","collectstrategy_deviceBasedStrategy","identityBasedStrategy","collectstrategy_identityBasedStrategy","CrossSigningBootstrapRequestsFinalization","__wbg_crosssigningbootstraprequests_free","CrossSigningBootstrapRequests","uploadKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadKeysRequest","uploadSigningKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest","UploadSigningKeysRequest","uploadSignaturesRequest","__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest","SignatureUploadRequest","CrossSigningKeyExportFinalization","__wbg_crosssigningkeyexport_free","CrossSigningKeyExport","masterKey","crosssigningkeyexport_masterKey","self_signing_key","crosssigningkeyexport_self_signing_key","userSigningKey","crosssigningkeyexport_userSigningKey","CrossSigningStatusFinalization","__wbg_crosssigningstatus_free","CrossSigningStatus","hasMaster","crosssigningstatus_hasMaster","hasSelfSigning","crosssigningstatus_hasSelfSigning","hasUserSigning","crosssigningstatus_hasUserSigning","Curve25519PublicKeyFinalization","__wbg_curve25519publickey_free","Curve25519PublicKey","curve25519publickey_new","curve25519publickey_length","curve25519publickey_toBase64","DecryptedRoomEventFinalization","__wbg_decryptedroomevent_free","DecryptedRoomEvent","event","__wbg_get_decryptedroomevent_event","sender","decryptedroomevent_sender","senderDevice","decryptedroomevent_senderDevice","senderCurve25519Key","decryptedroomevent_senderCurve25519Key","senderClaimedEd25519Key","decryptedroomevent_senderClaimedEd25519Key","forwardingCurve25519KeyChain","decryptedroomevent_forwardingCurve25519KeyChain","shieldState","strict","decryptedroomevent_shieldState","ShieldState","DecryptionSettingsFinalization","__wbg_decryptionsettings_free","DecryptionSettings","sender_device_trust_requirement","__wbg_get_decryptionsettings_sender_device_trust_requirement","__wbg_set_decryptionsettings_sender_device_trust_requirement","decryptionsettings_new","DehydratedDeviceFinalization","__wbg_dehydrateddevice_free","DehydratedDevice","keysForUpload","initial_device_display_name","dehydrated_device_key","DehydratedDeviceKey","dehydrateddevice_keysForUpload","DehydratedDeviceKeyFinalization","__wbg_dehydrateddevicekey_free","dehydrateddevicekey_createRandomKey","createKeyFromArray","dehydrateddevicekey_createKeyFromArray","dehydrateddevicekey_toBase64","DehydratedDevicesFinalization","__wbg_dehydrateddevices_free","DehydratedDevices","dehydrateddevices_create","rehydrate","device_id","device_data","dehydrateddevices_rehydrate","getDehydratedDeviceKey","dehydrateddevices_getDehydratedDeviceKey","saveDehydratedDeviceKey","dehydrateddevices_saveDehydratedDeviceKey","deleteDehydratedDeviceKey","dehydrateddevices_deleteDehydratedDeviceKey","DeviceFinalization","__wbg_device_free","Device","requestVerification","methods","device_requestVerification","encryptToDeviceEvent","event_type","content","device_encryptToDeviceEvent","isVerified","device_isVerified","isCrossSigningTrusted","device_isCrossSigningTrusted","isCrossSignedByOwner","device_isCrossSignedByOwner","setLocalTrust","local_state","device_setLocalTrust","device_userId","device_deviceId","displayName","device_displayName","getKey","algorithm","device_getKey","DeviceKey","curve25519Key","device_curve25519Key","ed25519Key","device_ed25519Key","Ed25519PublicKey","keys","device_keys","algorithms","device_algorithms","signatures","device_signatures","Signatures","localTrustState","device_localTrustState","isLocallyTrusted","device_isLocallyTrusted","isBlacklisted","device_isBlacklisted","isDeleted","device_isDeleted","firstTimeSeen","device_firstTimeSeen","BigInt","asUintN","verify","device_verify","isDehydrated","device_isDehydrated","DeviceIdFinalization","__wbg_deviceid_free","id","deviceid_new","deviceid_toString","DeviceKeyFinalization","__wbg_devicekey_free","devicekey_name","curve25519","devicekey_curve25519","ed25519","devicekey_ed25519","unknown","devicekey_unknown","devicekey_toBase64","DeviceKeyAlgorithmFinalization","__wbg_devicekeyalgorithm_free","DeviceKeyAlgorithm","devicekeyalgorithm_name","devicekeyalgorithm_toString","DeviceKeyIdFinalization","__wbg_devicekeyid_free","DeviceKeyId","devicekeyid_new","devicekeyid_algorithm","devicekeyid_deviceId","devicekeyid_toString","DeviceListsFinalization","__wbg_devicelists_free","DeviceLists","changed","left","devicelists_new","isEmpty","devicelists_isEmpty","devicelists_changed","devicelists_left","EciesFinalization","__wbg_ecies_free","Ecies","ecies_new","public_key","ecies_public_key","establish_inbound_channel","initial_message","ecies_establish_inbound_channel","InboundCreationResult","establish_outbound_channel","ecies_establish_outbound_channel","OutboundCreationResult","Ed25519PublicKeyFinalization","__wbg_ed25519publickey_free","ed25519publickey_length","ed25519publickey_toBase64","Ed25519SignatureFinalization","__wbg_ed25519signature_free","Ed25519Signature","signature","ed25519signature_new","ed25519signature_toBase64","EmojiFinalization","__wbg_emoji_free","Emoji","symbol","emoji_symbol","emoji_description","__wbg_encryptedattachment_free","EncryptionInfoFinalization","__wbg_encryptioninfo_free","EncryptionInfo","encryptioninfo_sender","encryptioninfo_senderDevice","encryptioninfo_senderCurve25519Key","encryptioninfo_senderClaimedEd25519Key","encryptioninfo_shieldState","EncryptionSettingsFinalization","__wbg_encryptionsettings_free","EncryptionSettings","__wbg_get_encryptionsettings_algorithm","__wbg_set_encryptionsettings_algorithm","rotationPeriod","__wbg_get_encryptionsettings_rotationPeriod","__wbg_set_encryptionsettings_rotationPeriod","rotationPeriodMessages","__wbg_get_encryptionsettings_rotationPeriodMessages","__wbg_set_encryptionsettings_rotationPeriodMessages","historyVisibility","__wbg_get_encryptionsettings_historyVisibility","__wbg_set_encryptionsettings_historyVisibility","sharingStrategy","__wbg_get_encryptionsettings_sharingStrategy","__wbg_set_encryptionsettings_sharingStrategy","encryptionsettings_new","EstablishedEciesFinalization","__wbg_establishedecies_free","EstablishedEcies","establishedecies_public_key","encrypt","deferred2_0","deferred2_1","establishedecies_encrypt","decrypt","deferred3_0","deferred3_1","establishedecies_decrypt","check_code","establishedecies_check_code","EventIdFinalization","__wbg_eventid_free","EventId","eventid_new","localpart","eventid_localpart","serverName","eventid_serverName","ServerName","eventid_toString","IdentityKeysFinalization","__wbg_identitykeys_free","IdentityKeys","__wbg_get_identitykeys_ed25519","__wbg_set_identitykeys_ed25519","__wbg_get_identitykeys_curve25519","__wbg_set_identitykeys_curve25519","InboundCreationResultFinalization","__wbg_inboundcreationresult_free","channel","__wbg_get_inboundcreationresult_channel","__wbg_set_inboundcreationresult_channel","__wbg_get_inboundcreationresult_message","InboundGroupSessionFinalization","__wbg_inboundgroupsession_free","InboundGroupSession","roomId","inboundgroupsession_roomId","RoomId","senderKey","inboundgroupsession_senderKey","sessionId","inboundgroupsession_sessionId","hasBeenImported","inboundgroupsession_hasBeenImported","KeysBackupRequestFinalization","__wbg_keysbackuprequest_free","KeysBackupRequest","__wbg_get_keysbackuprequest_id","body","__wbg_get_keysbackuprequest_body","version","__wbg_get_keysbackuprequest_version","keysbackuprequest_new","keysbackuprequest_type","KeysClaimRequestFinalization","__wbg_keysclaimrequest_free","KeysClaimRequest","__wbg_get_keysclaimrequest_id","__wbg_get_keysclaimrequest_body","keysclaimrequest_new","keysclaimrequest_type","KeysQueryRequestFinalization","__wbg_keysqueryrequest_free","KeysQueryRequest","__wbg_get_keysqueryrequest_id","__wbg_get_keysqueryrequest_body","keysqueryrequest_new","keysqueryrequest_type","KeysUploadRequestFinalization","__wbg_keysuploadrequest_free","KeysUploadRequest","__wbg_get_keysuploadrequest_id","__wbg_get_keysuploadrequest_body","keysuploadrequest_new","keysuploadrequest_type","MaybeSignatureFinalization","__wbg_maybesignature_free","MaybeSignature","isValid","maybesignature_isValid","isInvalid","maybesignature_isInvalid","maybesignature_signature","Signature","invalidSignatureSource","maybesignature_invalidSignatureSource","MegolmDecryptionErrorFinalization","__wbg_megolmdecryptionerror_free","MegolmDecryptionError","__wbg_get_megolmdecryptionerror_code","__wbg_get_megolmdecryptionerror_description","maybe_withheld","__wbg_get_megolmdecryptionerror_maybe_withheld","MegolmV1BackupKeyFinalization","__wbg_megolmv1backupkey_free","publicKeyBase64","megolmv1backupkey_publicKeyBase64","megolmv1backupkey_algorithm","MigrationFinalization","__wbg_migration_free","Migration","migrateBaseData","data","pickle_key","store_handle","StoreHandle","migration_migrateBaseData","migrateOlmSessions","sessions","migration_migrateOlmSessions","migrateMegolmSessions","migration_migrateMegolmSessions","OlmMachineFinalization","__wbg_olmmachine_free","OlmMachine","olmmachine_new","initialize","user_id","store_name","store_passphrase","olmmachine_initialize","initFromStore","olmmachine_initFromStore","olmmachine_userId","olmmachine_deviceId","deviceCreationTimeMs","olmmachine_deviceCreationTimeMs","identityKeys","olmmachine_identityKeys","olmmachine_displayName","roomKeyRequestsEnabled","olmmachine_roomKeyRequestsEnabled","enabled","olmmachine_set_roomKeyRequestsEnabled","roomKeyForwardingEnabled","olmmachine_roomKeyForwardingEnabled","olmmachine_set_roomKeyForwardingEnabled","trackedUsers","olmmachine_trackedUsers","updateTrackedUsers","users","olmmachine_updateTrackedUsers","markAllTrackedUsersAsDirty","olmmachine_markAllTrackedUsersAsDirty","receiveSyncChanges","to_device_events","changed_devices","one_time_keys_counts","unused_fallback_keys","olmmachine_receiveSyncChanges","outgoingRequests","olmmachine_outgoingRequests","markRequestAsSent","request_id","request_type","response","olmmachine_markRequestAsSent","encryptRoomEvent","room_id","olmmachine_encryptRoomEvent","decryptRoomEvent","decryption_settings","olmmachine_decryptRoomEvent","getRoomEventEncryptionInfo","olmmachine_getRoomEventEncryptionInfo","crossSigningStatus","olmmachine_crossSigningStatus","exportSecretsBundle","olmmachine_exportSecretsBundle","importSecretsBundle","bundle","SecretsBundle","olmmachine_importSecretsBundle","exportCrossSigningKeys","olmmachine_exportCrossSigningKeys","importCrossSigningKeys","master_key","user_signing_key","olmmachine_importCrossSigningKeys","bootstrapCrossSigning","reset","olmmachine_bootstrapCrossSigning","getIdentity","olmmachine_getIdentity","sign","olmmachine_sign","invalidateGroupSession","olmmachine_invalidateGroupSession","shareRoomKey","encryption_settings","olmmachine_shareRoomKey","queryKeysForUsers","olmmachine_queryKeysForUsers","getMissingSessions","olmmachine_getMissingSessions","getUserDevices","timeout_secs","olmmachine_getUserDevices","getDevice","olmmachine_getDevice","getVerification","flow_id","olmmachine_getVerification","getVerificationRequest","olmmachine_getVerificationRequest","VerificationRequest","getVerificationRequests","olmmachine_getVerificationRequests","receiveVerificationEvent","olmmachine_receiveVerificationEvent","exportRoomKeys","predicate","olmmachine_exportRoomKeys","importRoomKeys","exported_room_keys","progress_listener","olmmachine_importRoomKeys","importExportedRoomKeys","olmmachine_importExportedRoomKeys","importBackedUpRoomKeys","backed_up_room_keys","olmmachine_importBackedUpRoomKeys","saveBackupDecryptionKey","decryption_key","olmmachine_saveBackupDecryptionKey","getBackupKeys","olmmachine_getBackupKeys","verifyBackup","backup_info","olmmachine_verifyBackup","enableBackupV1","public_key_base_64","olmmachine_enableBackupV1","isBackupEnabled","olmmachine_isBackupEnabled","disableBackup","olmmachine_disableBackup","backupRoomKeys","olmmachine_backupRoomKeys","roomKeyCounts","olmmachine_roomKeyCounts","encryptExportedRoomKeys","passphrase","rounds","deferred4_0","deferred4_1","olmmachine_encryptExportedRoomKeys","ptr3","len3","decryptExportedRoomKeys","encrypted_exported_room_keys","olmmachine_decryptExportedRoomKeys","registerRoomKeyUpdatedCallback","callback","olmmachine_registerRoomKeyUpdatedCallback","registerRoomKeysWithheldCallback","olmmachine_registerRoomKeysWithheldCallback","registerUserIdentityUpdatedCallback","olmmachine_registerUserIdentityUpdatedCallback","registerDevicesUpdatedCallback","olmmachine_registerDevicesUpdatedCallback","registerReceiveSecretCallback","olmmachine_registerReceiveSecretCallback","getSecretsFromInbox","secret_name","olmmachine_getSecretsFromInbox","deleteSecretsFromInbox","olmmachine_deleteSecretsFromInbox","requestMissingSecretsIfNeeded","olmmachine_requestMissingSecretsIfNeeded","getRoomSettings","olmmachine_getRoomSettings","setRoomSettings","room_settings","RoomSettings","olmmachine_setRoomSettings","dehydratedDevices","olmmachine_dehydratedDevices","close","olmmachine_close","OtherUserIdentityFinalization","__wbg_otheruseridentity_free","OtherUserIdentity","otheruseridentity_isVerified","otheruseridentity_verify","request_event_id","otheruseridentity_requestVerification","verificationRequestContent","otheruseridentity_verificationRequestContent","otheruseridentity_masterKey","selfSigningKey","otheruseridentity_selfSigningKey","pinCurrentMasterKey","otheruseridentity_pinCurrentMasterKey","identityNeedsUserApproval","otheruseridentity_identityNeedsUserApproval","wasPreviouslyVerified","otheruseridentity_wasPreviouslyVerified","withdrawVerification","otheruseridentity_withdrawVerification","hasVerificationViolation","otheruseridentity_hasVerificationViolation","OutboundCreationResultFinalization","__wbg_outboundcreationresult_free","__wbg_get_outboundcreationresult_initial_message","OwnUserIdentityFinalization","__wbg_ownuseridentity_free","OwnUserIdentity","ownuseridentity_isVerified","ownuseridentity_verify","ownuseridentity_requestVerification","trustsOurOwnDevice","ownuseridentity_trustsOurOwnDevice","ownuseridentity_masterKey","ownuseridentity_selfSigningKey","ownuseridentity_userSigningKey","ownuseridentity_wasPreviouslyVerified","ownuseridentity_withdrawVerification","ownuseridentity_hasVerificationViolation","PickledInboundGroupSessionFinalization","__wbg_pickledinboundgroupsession_free","PickledInboundGroupSession","__unwrap","jsValue","pickle","__wbg_get_pickledinboundgroupsession_pickle","__wbg_get_pickledinboundgroupsession_senderKey","senderSigningKey","__wbg_get_pickledinboundgroupsession_senderSigningKey","__wbg_get_pickledinboundgroupsession_roomId","__wbg_set_pickledinboundgroupsession_roomId","imported","__wbg_get_pickledinboundgroupsession_imported","__wbg_set_pickledinboundgroupsession_imported","backedUp","__wbg_get_pickledinboundgroupsession_backedUp","__wbg_set_pickledinboundgroupsession_backedUp","pickledinboundgroupsession_new","PickledSessionFinalization","__wbg_pickledsession_free","PickledSession","__wbg_get_pickledsession_pickle","__wbg_get_pickledsession_senderKey","createdUsingFallbackKey","__wbg_get_pickledsession_createdUsingFallbackKey","__wbg_set_pickledsession_createdUsingFallbackKey","creationTime","__wbg_get_pickledsession_creationTime","__wbg_set_pickledsession_creationTime","lastUseTime","__wbg_get_pickledsession_lastUseTime","__wbg_set_pickledsession_lastUseTime","pickledsession_new","PutDehydratedDeviceRequestFinalization","__wbg_putdehydrateddevicerequest_free","PutDehydratedDeviceRequest","__wbg_get_putdehydrateddevicerequest_body","putdehydrateddevicerequest_new","QrFinalization","__wbg_qr_free","Qr","qr_state","hasBeenScanned","qr_hasBeenScanned","hasBeenConfirmed","qr_hasBeenConfirmed","qr_userId","otherUserId","qr_otherUserId","otherDeviceId","qr_otherDeviceId","weStarted","qr_weStarted","cancelInfo","qr_cancelInfo","isDone","qr_isDone","isCancelled","qr_isCancelled","isSelfVerification","qr_isSelfVerification","reciprocated","qr_reciprocated","flowId","qr_flowId","qr_roomId","toQrCode","qr_toQrCode","QrCode","toBytes","qr_toBytes","reciprocate","qr_reciprocate","confirmScanning","qr_confirmScanning","cancel","qr_cancel","cancelWithCode","qr_cancelWithCode","registerChangesCallback","qr_registerChangesCallback","QrCodeFinalization","__wbg_qrcode_free","renderIntoBuffer","qrcode_renderIntoBuffer","QrCodeDataFinalization","__wbg_qrcodedata_free","QrCodeData","rendezvous_url","server_name","qrcodedata_new","fromBytes","bytes","qrcodedata_fromBytes","qrcodedata_toBytes","qrcodedata_fromBase64","qrcodedata_toBase64","publicKey","qrcodedata_publicKey","rendezvousUrl","qrcodedata_rendezvousUrl","qrcodedata_serverName","mode","qrcodedata_mode","QrCodeScanFinalization","__wbg_qrcodescan_free","QrCodeScan","qrcodescan_fromBytes","RehydratedDeviceFinalization","__wbg_rehydrateddevice_free","RehydratedDevice","receiveEvents","rehydrateddevice_receiveEvents","RoomIdFinalization","__wbg_roomid_free","roomid_new","roomid_toString","RoomKeyCountsFinalization","__wbg_roomkeycounts_free","RoomKeyCounts","total","__wbg_get_roomkeycounts_total","__wbg_set_roomkeycounts_total","__wbg_get_roomkeycounts_backedUp","__wbg_set_roomkeycounts_backedUp","RoomKeyImportResultFinalization","__wbg_roomkeyimportresult_free","RoomKeyImportResult","importedCount","__wbg_get_roomkeyimportresult_importedCount","totalCount","__wbg_get_roomkeyimportresult_totalCount","roomkeyimportresult_keys","RoomKeyInfoFinalization","__wbg_roomkeyinfo_free","RoomKeyInfo","roomkeyinfo_algorithm","roomkeyinfo_roomId","roomkeyinfo_senderKey","roomkeyinfo_sessionId","RoomKeyWithheldInfoFinalization","__wbg_roomkeywithheldinfo_free","RoomKeyWithheldInfo","roomkeywithheldinfo_sender","roomkeywithheldinfo_algorithm","withheldCode","roomkeywithheldinfo_withheldCode","roomkeywithheldinfo_roomId","roomkeywithheldinfo_sessionId","RoomMessageRequestFinalization","__wbg_roommessagerequest_free","RoomMessageRequest","__wbg_get_roommessagerequest_id","__wbg_get_roommessagerequest_room_id","txn_id","__wbg_get_roommessagerequest_txn_id","__wbg_get_roommessagerequest_event_type","__wbg_get_roommessagerequest_body","roommessagerequest_new","roommessagerequest_type","RoomSettingsFinalization","__wbg_roomsettings_free","__wbg_get_roomsettings_algorithm","__wbg_set_roomsettings_algorithm","onlyAllowTrustedDevices","__wbg_get_roomsettings_onlyAllowTrustedDevices","__wbg_set_roomsettings_onlyAllowTrustedDevices","sessionRotationPeriodMs","__wbg_get_roomsettings_sessionRotationPeriodMs","__wbg_set_roomsettings_sessionRotationPeriodMs","sessionRotationPeriodMessages","__wbg_get_roomsettings_sessionRotationPeriodMessages","__wbg_set_roomsettings_sessionRotationPeriodMessages","roomsettings_new","SasFinalization","__wbg_sas_free","Sas","sas_userId","sas_deviceId","sas_otherUserId","sas_otherDeviceId","sas_flowId","sas_roomId","supportsEmoji","sas_supportsEmoji","startedFromRequest","sas_startedFromRequest","sas_isSelfVerification","haveWeConfirmed","sas_haveWeConfirmed","hasBeenAccepted","sas_hasBeenAccepted","sas_cancelInfo","sas_weStarted","accept","sas_accept","confirm","sas_confirm","sas_cancel","sas_cancelWithCode","timedOut","sas_timedOut","canBePresented","sas_canBePresented","sas_isDone","sas_isCancelled","emoji","sas_emoji","emojiIndex","sas_emojiIndex","decimals","sas_decimals","sas_registerChangesCallback","SecretsBundleFinalization","__wbg_secretsbundle_free","secretsbundle_masterKey","secretsbundle_selfSigningKey","secretsbundle_userSigningKey","backupBundle","secretsbundle_backupBundle","to_json","secretsbundle_to_json","from_json","json","secretsbundle_from_json","ServerNameFinalization","__wbg_servername_free","servername_new","host","servername_host","port","servername_port","isIpLiteral","servername_isIpLiteral","ShieldStateFinalization","__wbg_shieldstate_free","color","__wbg_get_shieldstate_color","__wbg_set_shieldstate_color","__wbg_get_shieldstate_code","__wbg_set_shieldstate_code","shieldstate_message","SignatureFinalization","__wbg_signature_free","signature_ed25519","signature_toBase64","SignatureUploadRequestFinalization","__wbg_signatureuploadrequest_free","__wbg_get_signatureuploadrequest_id","__wbg_get_signatureuploadrequest_body","signed_keys","signatureuploadrequest_new","signatureuploadrequest_type","SignatureVerificationFinalization","__wbg_signatureverification_free","SignatureVerification","deviceState","signatureverification_deviceState","userState","signatureverification_userState","trusted","signatureverification_trusted","SignaturesFinalization","__wbg_signatures_free","signatures_new","addSignature","signer","key_id","signatures_addSignature","getSignature","signatures_getSignature","signatures_get","clear","signatures_clear","signatures_isEmpty","count","signatures_count","asJSON","signatures_asJSON","StoreHandleFinalization","__wbg_storehandle_free","open","storehandle_open","openWithKey","store_key","storehandle_openWithKey","ToDeviceRequestFinalization","__wbg_todevicerequest_free","ToDeviceRequest","__wbg_get_todevicerequest_id","__wbg_get_todevicerequest_event_type","__wbg_get_todevicerequest_txn_id","__wbg_get_todevicerequest_body","todevicerequest_new","todevicerequest_type","TracingFinalization","__wbg_tracing_free","Tracing","isAvailable","tracing_isAvailable","min_level","tracing_new","minLevel","tracing_set_minLevel","turnOn","tracing_turnOn","turnOff","tracing_turnOff","UploadSigningKeysRequestFinalization","__wbg_uploadsigningkeysrequest_free","__wbg_get_uploadsigningkeysrequest_body","uploadsigningkeysrequest_new","UserDevicesFinalization","__wbg_userdevices_free","UserDevices","userdevices_get","isAnyVerified","userdevices_isAnyVerified","userdevices_keys","devices","userdevices_devices","UserIdFinalization","__wbg_userid_free","userid_new","userid_localpart","userid_serverName","isHistorical","userid_isHistorical","userid_toString","clone","userid_clone","VerificationRequestFinalization","__wbg_verificationrequest_free","request","own_user_id","own_device_id","other_user_id","verificationrequest_request","ownUserId","verificationrequest_ownUserId","verificationrequest_otherUserId","verificationrequest_otherDeviceId","verificationrequest_roomId","verificationrequest_cancelInfo","isPassive","verificationrequest_isPassive","isReady","verificationrequest_isReady","verificationrequest_timedOut","timeRemainingMillis","verificationrequest_timeRemainingMillis","theirSupportedMethods","verificationrequest_theirSupportedMethods","ourSupportedMethods","verificationrequest_ourSupportedMethods","verificationrequest_flowId","verificationrequest_isSelfVerification","verificationrequest_weStarted","verificationrequest_isDone","phase","verificationrequest_phase","verificationrequest_getVerification","verificationrequest_registerChangesCallback","verificationrequest_isCancelled","acceptWithMethods","verificationrequest_acceptWithMethods","verificationrequest_accept","verificationrequest_cancel","startSas","verificationrequest_startSas","generateQrCode","verificationrequest_generateQrCode","scanQrCode","verificationrequest_scanQrCode","VersionsFinalization","__wbg_versions_free","vodozemac","__wbg_get_versions_vodozemac","matrix_sdk_crypto","__wbg_get_versions_matrix_sdk_crypto","git_sha","__wbg_get_versions_git_sha","git_description","__wbg_get_versions_git_description","__wbg_String_8f0eb39a4a4c2f66","String","setInt32","__wbg_String_eecc4a11987127d6","__wbg_Window_b0044ac7db258535","Window","__wbg_WorkerGlobalScope_b74cefefc62a37da","WorkerGlobalScope","__wbg_add_0d9e99fb9c2d2cc5","add","__wbg_add_c836e3d4b14cd062","arguments","__wbg_at_479807bfddde3a33","at","__wbg_backupkeys_new","__wbg_bound_1918c0826c5b9363","arg3","IDBKeyRange","bound","__wbg_bound_324dfb8899c9798c","__wbg_buffer_61b7ce01341d7f88","__wbg_call_3b770f0d6eb4720e","__wbg_call_500db948e69c7330","__wbg_call_9bd6f269d4835e33","arg4","__wbg_call_b0d8e36992d9900d","__wbg_clearTimeout_5a54f8841c30079a","clearTimeout","__wbg_clear_da83758e0bea0eb6","__wbg_close_f6e618ed8b0326a3","__wbg_code_71136b86e2aa7f41","__wbg_continue_bd44561c014cacea","continue","__wbg_count_244aa4118e005b59","__wbg_count_4df50ef6c1ddd770","__wbg_createIndex_14571b3c4eec1628","createIndex","__wbg_createIndex_1d4b2bbb6b21b8f8","__wbg_createObjectStore_b6f14aa10f83a300","createObjectStore","__wbg_crosssigningbootstraprequests_new","__wbg_crosssigningkeyexport_new","__wbg_crosssigningstatus_new","__wbg_crypto_ed58b8e10a292839","crypto","__wbg_debug_156ca727dbc3150f","console","__wbg_debug_3acd668e6e6c6087","__wbg_decryptedroomevent_new","__wbg_dehydrateddevice_new","__wbg_dehydrateddevicekey_new","__wbg_deleteObjectStore_1f50ba0263875deb","deleteObjectStore","__wbg_delete_5c33e4966f59624d","delete","__wbg_delete_d97b2b4ff716c553","__wbg_device_new","__wbg_deviceid_new","__wbg_devicekey_new","__wbg_devicekeyid_new","__wbg_done_f22c1561fa919baa","done","__wbg_emoji_new","__wbg_encryptioninfo_new","__wbg_entries_4f2bb9b0d701c0f6","entries","__wbg_entries_82bf0e755ef54a5f","__wbg_error_32fda676ae978f6e","error","__wbg_error_7534b8e9a36f1ab4","deferred0_0","deferred0_1","__wbg_error_77233c625ed0c533","__wbg_error_fab41a42d22bf2bc","__wbg_from_d68eaa96dba25449","from","__wbg_getAllKeys_ad97dc28822a6891","getAllKeys","__wbg_getAll_72e2faaa06d1a8cf","getAll","__wbg_getAll_8f38031e5969c7f5","__wbg_getAll_8fa84589faccab36","__wbg_getRandomValues_bcb4912f16000dc4","getRandomValues","__wbg_getTime_ab8b72009983c537","getTime","__wbg_get_6a4f854f5cca7403","__wbg_get_7081edc0440983a5","__wbg_get_9aa3dff3f0266054","__wbg_get_bbccf8970793c087","Reflect","__wbg_getwithrefkey_1dc361bd10053bfe","__wbg_getwithrefkey_6550b2c093d2eb18","__wbg_global_b6f5c73312f62313","global","__wbg_inboundgroupsession_new","__wbg_index_871d874253bae760","index","__wbg_indexedDB_601ec26c63e333de","indexedDB","__wbg_indexedDB_72e2ca071222fd9e","__wbg_indexedDB_e34a5e9b3d2fcfa1","__wbg_info_c3044c86ae29faab","info","__wbg_info_ed71056bef15b91a","__wbg_instanceof_ArrayBuffer_670ddde44cdb2602","ArrayBuffer","__wbg_instanceof_Map_98ecb30afec5acdb","Map","__wbg_instanceof_Promise_0aa3a90cfe6672c9","Promise","__wbg_instanceof_Uint8Array_28af5bc19d6acad8","__wbg_isArray_1ba11a930108ec51","__wbg_isSafeInteger_12f5549b2fca23f4","Number","isSafeInteger","__wbg_item_7156a8ffa4d816bc","item","__wbg_iterator_23604bb983791576","Symbol","iterator","__wbg_key_87db8226759da642","__wbg_keysbackuprequest_new","__wbg_keysclaimrequest_new","__wbg_keysqueryrequest_new","__wbg_keysuploadrequest_new","__wbg_length_65d1cd11729ced11","__wbg_length_d65cf0786bfc5739","__wbg_length_f4d79409aa324811","__wbg_lowerBound_3aa47caa33c7e1e6","lowerBound","__wbg_maybesignature_new","__wbg_megolmdecryptionerror_new","__wbg_message_d19bdb65f0a41cf5","__wbg_msCrypto_0a36e2ec3a343d26","msCrypto","__wbg_name_8862cd49ad807c59","__wbg_new_0f1bd659dcd47068","Set","__wbg_new_254fa9eac11932ae","__wbg_new_3d446df9155128ef","state0","closure431_externref_shim","__wbg_adapter_758","__wbg_new_3ff5b33b1ce712df","__wbg_new_41257536af60ed14","Date","__wbg_new_688846f374351c92","__wbg_new_8a6f238a6ece86ea","__wbg_new_9451f3dcb42e0e37","Uint8ClampedArray","__wbg_new_bc96c6a1c0786643","__wbg_newnoargs_fd9e4bf8be2bc16d","Function","__wbg_newwithbyteoffsetandlength_ba35896968751d91","__wbg_newwithbyteoffsetandlength_c0c90653f73c7dfb","__wbg_newwithlength_2aede0ef4e6e97ec","__wbg_newwithlength_34ce8f1051e74449","__wbg_newwithmessage_80e6436058862fd4","DOMException","__wbg_next_01dd9234a5bf6d05","next","__wbg_next_137428deb98342b0","__wbg_node_02999533c4ea02e3","node","__wbg_now_2c95c9de01293173","now","__wbg_now_64d0bb151e5d3889","__wbg_objectStoreNames_cb00c8113b3cf5df","objectStoreNames","__wbg_objectStore_cdbc73ee600a2cfa","objectStore","__wbg_oldVersion_a31d9f8577239dd8","oldVersion","__wbg_olmmachine_new","__wbg_openCursor_37e21d9af1a61159","openCursor","__wbg_openCursor_da08cc74542711ad","__wbg_openCursor_e7a3f6453a0f6725","__wbg_open_4588c85c0c43671d","__wbg_open_5c51d4d6d7ab6da6","__wbg_otheruseridentity_new","__wbg_ownuseridentity_new","__wbg_parse_161c68378e086ae1","parse","__wbg_performance_7a3ffd0b17f663ad","performance","__wbg_pickledinboundgroupsession_unwrap","__wbg_pickledsession_unwrap","__wbg_process_5c1d670bc53614b8","process","__wbg_push_6edad0df4b546b2c","__wbg_put_5393e88dbe742e8f","put","__wbg_putdehydrateddevicerequest_new","__wbg_qr_new","__wbg_queueMicrotask_2181040e064c0dc8","queueMicrotask","__wbg_queueMicrotask_ef9ac43769cbcc4f","__wbg_randomFillSync_ab2cfe79ebbf2740","randomFillSync","__wbg_readyState_8428fa7c5e093401","readyState","indexOf","__wbg_rehydrateddevice_new","__wbg_require_79b1e9274cde3c87","__wbg_resolve_0bf7c44d641804f9","resolve","__wbg_result_e6ba6a347dcb7470","__wbg_roomid_unwrap","__wbg_roomkeycounts_new","__wbg_roomkeyimportresult_new","__wbg_roomkeyinfo_new","__wbg_roomkeywithheldinfo_new","__wbg_roommessagerequest_new","__wbg_roomsettings_new","__wbg_sas_new","__wbg_secretsbundle_new","__wbg_setTimeout_db2dbaeefb6f39c7","setTimeout","__wbg_set_1d80752d0d5f0b21","__wbg_set_23d69db4e5c66a6e","__wbg_set_3807d5f0bfc24aa7","__wbg_set_3f1d0b984ed272ed","__wbg_set_76818dc3c59a63d5","__wbg_set_9592f7d5b752cae3","__wbg_setonabort_ade6cac5c35a572f","onabort","__wbg_setonblocked_d13048be9383f4dc","onblocked","__wbg_setoncomplete_2747fb71ae0af4a8","oncomplete","__wbg_setonerror_72b33e31f9edb045","onerror","__wbg_setonerror_e4beb2652cf66635","__wbg_setonsuccess_57167b1c2650357c","onsuccess","__wbg_setonupgradeneeded_887c7a5fca66011e","onupgradeneeded","__wbg_setonversionchange_a6f60bd1d110795d","onversionchange","__wbg_setunique_cfc477dc5825e1c4","unique","__wbg_signatures_new","__wbg_signatureuploadrequest_new","__wbg_signatureverification_new","__wbg_stack_0ed75d68575b0f3c","__wbg_static_accessor_GLOBAL_0be7472e492ad3e3","g","__wbg_static_accessor_GLOBAL_THIS_1a6eb482d12c9bfb","globalThis","__wbg_static_accessor_SELF_1dc398a895c82351","self","__wbg_static_accessor_WINDOW_ae1c80c7eea8d64a","window","__wbg_storehandle_new","__wbg_stringify_f4f701bc34ceda61","__wbg_subarray_46adeb9b86949d12","__wbg_target_a8fe593e7ee79c21","target","__wbg_then_0438fad860fe38e1","then","__wbg_then_0ffafeddf0e182a4","__wbg_todevicerequest_new","__wbg_transaction_bc71c2aaaf467420","transaction","__wbg_transaction_d2b6d520837fbe7f","__wbg_transaction_dbab9cd9ea849958","__wbg_update_211ddccaf2cec6ee","update","__wbg_userdevices_new","__wbg_userid_new","__wbg_userid_unwrap","__wbg_value_0ad6f37677c8ee74","__wbg_value_4c32fd138a88eee2","__wbg_values_7aa03dd078978c86","values","__wbg_verificationrequest_new","__wbg_version_2b650c9d4f0a2438","__wbg_versions_c71aa1626a93e0a1","versions","__wbg_warn_123db6aa8948382e","warn","__wbg_warn_9d038df1589cb1bd","__wbindgen_as_number","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_u64","__wbindgen_bigint_get_as_i64","setBigInt64","__wbindgen_boolean_get","__wbindgen_cb_drop","__wbindgen_closure_wrapper1050","__wbindgen_closure_wrapper2213","__wbindgen_closure_wrapper5386","__wbindgen_closure_wrapper6843","__wbindgen_closure_wrapper6848","__wbindgen_debug_string","__wbindgen_error_new","__wbindgen_in","__wbindgen_init_externref_table","table","grow","__wbindgen_is_array","__wbindgen_is_bigint","__wbindgen_is_function","__wbindgen_is_null","__wbindgen_is_object","__wbindgen_is_string","__wbindgen_is_undefined","__wbindgen_jsval_eq","__wbindgen_jsval_loose_eq","__wbindgen_memory","__wbindgen_number_get","setFloat64","__wbindgen_number_new","__wbindgen_string_get","__wbindgen_string_new","__wbindgen_throw","__wbindgen_try_into_number"],"sourceRoot":""}